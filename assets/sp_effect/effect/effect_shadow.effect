CCEffect %{
  techniques:
  - name: shadow-1-pass
    passes:
    - name: shadow #渲染阴影
      vert: sprite-vs:vert
      frag: sprite-1pass-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
          - blend: true
            blendSrc: src_alpha
            blendDst: one_minus_src_alpha
            blendSrcAlpha: src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        _shadowColor: { value: [0, 0, 0, 0.5], editor: { type: color } } #阴影颜色
        _offset: { value: [0.1, 0.1], editor: { type: vetor } } #遮罩中心点
  - name: shadow-2-pass
    passes:
    - name: shadow #渲染阴影
      vert: shadow-vs:vert
      frag: shadow-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
          - blend: true
            blendSrc: src_alpha
            blendDst: one_minus_src_alpha
            blendSrcAlpha: src_alpha
            blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
            _shadowColor: { value: [0, 0, 0, 0.5], editor: { type: color } } #阴影颜色
            _offset: { value: [0.1,0.1], editor: { type: vetor } } #遮罩中心点
    - name: normal #渲染正常图片
      vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
          - blend: true
            blendSrc: src_alpha
            blendDst: one_minus_src_alpha
            blendSrcAlpha: src_alpha
            blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
}%

CCProgram shadow-vs %{
  precision highp float;

  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common-define>
  #endif
  
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  uniform Constant {
    vec4 _shadowColor;
    vec2 _offset;
  };

  out vec4 i_color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

  #if USE_LOCAL
    pos = cc_matWorld * pos;
  #endif

  #if USE_PIXEL_ALIGNMENT
    pos = cc_matView * pos;
    pos.xyz = floor(pos.xyz);
    pos = cc_matProj * pos;
  #else
    pos = cc_matViewProj * pos;
  #endif

    uv0 = a_texCoord;

  #if SAMPLE_FROM_RT
    CC_HANDLE_RT_SAMPLE_FLIP(uv0);
  #endif
    i_color = a_color;

    //Shadow 偏移
    pos.x += _offset.x; 
    pos.y += _offset.y;

    //將Shadow推離Camera一點距離，避免與下一個Pass的Sprite產生Z-fighting
    pos.z += 0.01;
    return pos;
  }
}%


//阴影渲染
CCProgram shadow-fs %{
  precision highp float;

  #include <cc-global>
#if USE_TEXTURE  
  #include <sprite-texture>
#endif

  in vec4 i_color;
  in vec2 uv0;

  uniform Constant {
    vec4 _shadowColor;
    vec2 _offset;
  };

  vec4 frag () {
    vec4 color = vec4(1.0);

  #if USE_TEXTURE  
    color *= texture(cc_spriteTexture, uv0);
    if (color.a >= 0.5) {
      color = _shadowColor;
    }
  #endif

    return color;
  }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%

CCProgram sprite-1pass-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  uniform Constant {
    vec4 _shadowColor;
    vec2 _offset;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    vec4 shadow = vec4(_shadowColor.rgb, texture(cc_spriteTexture, uv0 - _offset).a * _shadowColor.a);
    o = mix(shadow, o, o.a) * color;
    ALPHA_TEST(o);
    return o;
  }
}%