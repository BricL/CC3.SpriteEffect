CCEffect %{
  techniques:
  - name: default
    passes:
    - vert: sprite-vs:vert 
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties: &props
        _speed: { value: 0.8, editor: { type: range(0,2) } }  #变化速度
        _density: { value: 6.12, editor: { type: range(1,100) } }  #密度
  - name: 2d-in-3d
    passes:
    - vert: sprite-vs:vert 
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties: *props
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%


CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>
  #include <sprite-texture>

  // #define TAU 6.12
  #define MAX_ITER 5  //最大迭代次数

  in vec4 color;
  in vec2 uv0;

  uniform Constant {
    float _speed;
    float _density;
  };

#if USE_Brightness
  float calculateBrightness(vec2 uv)
  {
      vec2 noisePos = mod(uv * _density, _density) - 250.0;  // Calculate the position of the noise

      vec2 i = vec2(noisePos);  // Initialize i to the noise position
      float brightness = 1.0;  // Initialize brightness to 1.0
      float noiseIntensity = .0065;  // Noise intensity

      for (int iter = 0; iter < MAX_ITER; iter++)  // Loop MAX_ITER times
      {
          float timeFactor =  _speed * cc_time.x * (1.0 - (3.5 / float(iter+1)));  // Calculate time factor
          i = noisePos + vec2(cos(timeFactor - i.x) + sin(timeFactor + i.y), sin(timeFactor - i.y) + cos(1.5*timeFactor + i.x));  // Calculate new noise position
          brightness += 1.0 / length(vec2(noisePos.x / (cos(i.x+timeFactor)/noiseIntensity), noisePos.y / (cos(i.y+timeFactor)/noiseIntensity)));  // Calculate brightness
      }

      brightness /= float(MAX_ITER);  // Take the average
      brightness = 1.17-pow(brightness, 1.4);  // Calculate brightness value
      return pow(abs(brightness), 20.0); // Calculate color value
  }
#endif

  vec4 frag () {
    vec4 o = vec4(0.0);
    vec2 uv = uv0;

    #if USE_Brightness  
      o = calculateBrightness(uv) * color;  // 计算颜色值
    #endif

    vec4 tex = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);

    // 混合光和纹理贴图
    tex.r = tex.r + o.r * tex.a * color.a; 
    tex.g = tex.g + o.g * tex.a * color.a; 
    tex.b = tex.b + o.b * tex.a * color.a; 
    o = tex;  

    ALPHA_TEST(o);
    return o;
  }
}%