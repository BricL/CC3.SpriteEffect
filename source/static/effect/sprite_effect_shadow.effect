CCEffect %{
  techniques:
  - name: shadow-1-pass
    passes:
    - name: shadow #渲染阴影
      vert: sprite-vs:vert
      frag: sprite-1pass-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
          - blend: true
            blendSrc: src_alpha
            blendDst: one_minus_src_alpha
            blendSrcAlpha: src_alpha
      rasterizerState:
        cullMode: none
      properties: &props
        alphaThreshold: { value: 0.5 }
        propsTexture: { value: white, editor: { type: sampler2D } }
        # _shadowColor: { value: [0, 0, 0, 0.5], editor: { type: color } } #阴影颜色
        # _offset: { value: [0.1, 0.1], editor: { type: vetor } } #遮罩中心点
  - name: shadow-2-pass
    passes:
    - name: shadow #渲染阴影
      vert: shadow-vs:vert
      frag: shadow-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
          - blend: true
            blendSrc: src_alpha
            blendDst: one_minus_src_alpha
            blendSrcAlpha: src_alpha
            blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties: *props
    - name: normal #渲染正常图片
      vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
          - blend: true
            blendSrc: src_alpha
            blendDst: one_minus_src_alpha
            blendSrcAlpha: src_alpha
            blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
}%

CCProgram shadow-vs %{
  precision highp float;

  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common-define>
  #endif
  #include "./chunks/util.chunk"
  
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  uniform sampler2D propsTexture;
  // uniform Constant {
  //   vec4 _shadowColor;
  //   vec2 _offset;
  // };

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 idxEffectGroup = a_color;
    vec4 effectColor = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 0); 
    vec4 prop1 = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 1);
    vec4 prop2 = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 2);
    vec4 _shadowColor = prop1;
    vec2 _offset = prop2.xy;

    vec4 pos = vec4(a_position, 1);

    //Shadow 偏移 in Object Space
    pos.x += _offset.x;
    pos.y += _offset.y;

  #if USE_LOCAL
    pos = cc_matWorld * pos;
  #endif

  #if USE_PIXEL_ALIGNMENT
    pos = cc_matView * pos;
    pos.xyz = floor(pos.xyz);
    pos = cc_matProj * pos;
  #else
    pos = cc_matViewProj * pos;
  #endif

    uv0 = a_texCoord;

  #if SAMPLE_FROM_RT
    CC_HANDLE_RT_SAMPLE_FLIP(uv0);
  #endif
    color = a_color;



    //將Shadow推離Camera一點距離，避免與下一個Pass的Sprite產生Z-fighting
    // pos.z += 0.001;
    return pos;
  }
}%

CCProgram shadow-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <sprite-texture>
  #include "./chunks/util.chunk"

  in vec4 color;
  in vec2 uv0;

  uniform sampler2D propsTexture;
  // uniform Constant {
  //   vec4 _shadowColor;
  //   vec2 _offset;
  // };

  vec4 frag () {
    vec4 idxEffectGroup = color;
    vec4 effectColor = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 0); effectColor = vec4(effectColor.rgb, effectColor.a * color.a);
    vec4 prop1 = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 1);
    vec4 prop2 = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 2);
    vec4 _shadowColor = prop1;
    vec2 _offset = prop2.xy;

    vec4 o = vec4(1.0);
    o *= (_shadowColor * CCSampleWithAlphaSeparated(cc_spriteTexture, uv0).a);

    ALPHA_TEST(o);
    return o;
  }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <sprite-texture>
  #include "./chunks/util.chunk"

  in vec4 color;
  in vec2 uv0;

  uniform sampler2D propsTexture;

  vec4 frag () {
    vec4 idxEffectGroup = color;
    vec4 effectColor = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 0); effectColor = vec4(effectColor.rgb, effectColor.a * color.a);
    vec4 prop1 = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 1);
    vec4 prop2 = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 2);
    vec4 _shadowColor = prop1;
    vec2 _offset = prop2.xy;

    vec4 o = vec4(1, 1, 1, 1);

    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #if IS_GRAY
      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
      o.r = o.g = o.b = gray;
    #endif

    o *= effectColor;

    ALPHA_TEST(o);
    return o;
  }
}%

CCProgram sprite-1pass-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <sprite-texture>
  #include "./chunks/util.chunk"

  in vec4 color;
  in vec2 uv0;

  uniform sampler2D propsTexture;
  // uniform Constant {
  //   vec4 _shadowColor;
  //   vec2 _offset;
  // };

  vec4 frag () {
    vec4 idxEffectGroup = color;
    vec4 effectColor = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 0); effectColor = vec4(effectColor.rgb, effectColor.a * color.a);
    vec4 prop1 = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 1);
    vec4 prop2 = getPropFromPropTexture(propsTexture, idxEffectGroup, 1024, 4, 2);
    vec4 _shadowColor = prop1;
    vec2 _offset = prop2.xy;

    vec4 o = vec4(1, 1, 1, 1);

    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    vec4 shadow = vec4(_shadowColor.rgb, texture(cc_spriteTexture, uv0 - _offset).a * _shadowColor.a);
    o = mix(shadow, o, o.a) * effectColor;

    ALPHA_TEST(o);
    return o;
  }
}%