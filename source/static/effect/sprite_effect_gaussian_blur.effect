CCEffect %{
  techniques:
  - name: default
    passes:
    - vert: sprite-vs:vert 
      frag: sprite-fs:frag
      depthStencilState:
         depthTest: false
         depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
         cullMode: none
      properties: &props
        alphaThreshold: { value: 0.5 }
        propsTexture: { value: white, editor: { type: sampler2D } }
  - name: 2d-in-3d
    passes:
    - vert: sprite-vs:vert 
      frag: sprite-fs:frag
      depthStencilState:
         depthTest: true
         depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
         cullMode: none
      properties: *props
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>
  #include <sprite-texture>
  #include "./chunks/util.chunk"

  in vec4 color;
  in vec2 uv0;

  uniform sampler2D propsTexture;

  float BLUR_KERNEL_[13]; // 固定最大長度
  const int BLUR_KERNEL_SIZE =
#if HIGH
  13;
#elif MEDIUM
  9;
#else
  5;
#endif

  vec4 Tex2DBlurring(sampler2D tex, vec2 uv0, vec4 baseUV, vec2 blur) {
#if HIGH
    const int BLUR_KERNEL_SIZE = 13;
    BLUR_KERNEL_[0] = 0.0438;
    BLUR_KERNEL_[1] = 0.1138;
    BLUR_KERNEL_[2] = 0.2486;
    BLUR_KERNEL_[3] = 0.4566;
    BLUR_KERNEL_[4] = 0.7046;
    BLUR_KERNEL_[5] = 0.9141;
    BLUR_KERNEL_[6] = 1.0;
    BLUR_KERNEL_[7] = 0.9141;
    BLUR_KERNEL_[8] = 0.7046;
    BLUR_KERNEL_[9] = 0.4566;
    BLUR_KERNEL_[10] = 0.2486;
    BLUR_KERNEL_[11] = 0.1138;
    BLUR_KERNEL_[12] = 0.0438;
#elif MEDIUM
    const int BLUR_KERNEL_SIZE = 9;
    BLUR_KERNEL_[0] = 0.0438;
    BLUR_KERNEL_[1] = 0.1719;
    BLUR_KERNEL_[2] = 0.4566; 
    BLUR_KERNEL_[3] = 0.8204; 
    BLUR_KERNEL_[4] = 1.0; 
    BLUR_KERNEL_[5] = 0.8204;
    BLUR_KERNEL_[6] = 0.4566; 
    BLUR_KERNEL_[7] = 0.1719; 
    BLUR_KERNEL_[8] = 0.0438;
#else
    const int BLUR_KERNEL_SIZE = 5;
    BLUR_KERNEL_[0] = 0.2486;
    BLUR_KERNEL_[1] = 0.7046;
    BLUR_KERNEL_[2] = 1.0;
    BLUR_KERNEL_[3] = 0.7046;
    BLUR_KERNEL_[4] = 0.2486;
#endif

    vec2 uv = normalizeUV(uv0, baseUV);
    float mixFactor = 0.0;
    vec4 o = vec4(0.0);
    float sum = 0.0;

    vec4 tempX = vec4(0.0);
    #if USE_X_DIRECTION
      for (int x = 0; x < BLUR_KERNEL_SIZE; x++) {
        float weight = BLUR_KERNEL_[x];
        sum += weight;

        vec2 offset = vec2(blur.x * (float(x) - float(BLUR_KERNEL_SIZE) / 2.0), 0.0);
        vec2 texCoord = denormalizeUV(uv + offset, baseUV);
        o += CCSampleWithAlphaSeparated(tex, texCoord) * weight;
      }
      tempX = o / sum;
      mixFactor += 1.0;
    #endif

    vec4 tempY = vec4(0.0);
    #if USE_Y_DIRECTION
      o = vec4(0.0);
      sum = 0.0;
      for (int y = 0; y < BLUR_KERNEL_SIZE; y++) {
        float weight = BLUR_KERNEL_[y];
        sum += weight;

        vec2 offset = vec2(0.0, blur.y * (float(y) - float(BLUR_KERNEL_SIZE) / 2.0));
        vec2 texCoord = denormalizeUV(uv + offset, baseUV);
        o += CCSampleWithAlphaSeparated(tex, texCoord) * weight;
      }
      tempY = o / sum;
      mixFactor += 1.0;
    #endif

    return mixFactor > 0.0 ? (tempX + tempY) / mixFactor : vec4(0.0);
  }

  vec4 frag () {
    vec4 effectColor = getPropFromPropTexture(propsTexture, color, 0);
    vec4 baseUV = getPropFromPropTexture(propsTexture, color, 1);
    vec4 props = getPropFromPropTexture(propsTexture, color, 2);

    effectColor = vec4(effectColor.rgb, effectColor.a * color.a);

    vec2 textureSize = props.xy;
    float blurFactor = props.z;

    vec4 o = vec4(1.0);
    o = Tex2DBlurring(cc_spriteTexture, uv0, baseUV, blurFactor * vec2(1.0/textureSize.x, 1.0/textureSize.y) * 2.0 );
    o *= effectColor;
    return o;
  }
}%
