CCEffect %{
  techniques:
  - name: default
    passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties: &props
        alphaThreshold: { value: 0.5 }
        propsTexture: { value: white, editor: { type:  sampler2D }}
  - name: 2d-in-3d
    passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
        rasterizerState:
          cullMode: none
        properties: *props
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <sprite-texture>
  #include "./chunks/util.chunk"

  in vec4 color;
  in vec2 uv0;

  uniform sampler2D propsTexture;

  vec4 frag () {
    vec4 effectColor = getPropFromPropTexture(propsTexture, color, 1);
    vec4 baseUV = getPropFromPropTexture(propsTexture, color, 2);
    vec4 props1 = getPropFromPropTexture(propsTexture, color, 3);
    vec4 props2 = getPropFromPropTexture(propsTexture, color, 4);

    effectColor = vec4(effectColor.rgb, effectColor.a * color.a);

    vec4 _baseUV = baseUV;
    vec4 _lightColor = props1;

    // x: width, y: soft, z: offset, w: rotation
    float _lightWidth = props2.x;
    float _soft = props2.y + 0.01;
    float _offset = props2.z;
    float _rotation = props2.w;

    vec4 o = vec4(1, 1, 1, 1);
    vec2 uv = normalizeUV(uv0, _baseUV);
  
    o = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #if IS_GRAY
      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
      o.r = o.g = o.b = gray;
    #endif

    uv = (uv * 2.0) - vec2(0.5);
    uv = rotate(uv, _rotation);
    float c = smoothstep(_lightWidth, _lightWidth - _soft, abs(uv.x + _offset));
    o = (o * effectColor) + vec4(_lightColor.rgb * c * 1.5, 0.0);

    ALPHA_TEST(o);
    return o;
  }
}%
