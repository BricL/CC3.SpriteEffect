"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reimportAsset = exports.autoAssignTextureAsset = exports.assignEffectAsset = void 0;
async function assignEffectAsset(nameOfEffect, uuidOfNode) {
    try {
        console.log('Effect掛載啟動');
        if (!uuidOfNode) {
            const uuids = Editor.Selection.getSelected('node');
            uuidOfNode = uuids[0];
        }
        const nodeInfo = await Editor.Message.request('scene', 'query-node', uuidOfNode);
        if (!nodeInfo) {
            console.error(`未選中節點`);
            return false;
        }
        const index = nodeInfo.__comps__.findIndex((v) => v.type === nameOfEffect);
        if (index === -1) {
            console.error(`節點未掛載${nameOfEffect}組件`);
            return false;
        }
        const effectFileName = nameOfEffect.replace(/([A-Z])/g, '_$1').toLowerCase().slice(1);
        const url = `db://sprite_effect/effect/${effectFileName}.effect`;
        const res = await Editor.Message.request('asset-db', 'query-asset-info', url);
        const success = await Editor.Message.request('scene', 'set-property', {
            uuid: uuidOfNode,
            path: `__comps__.${index}.effectAsset`,
            dump: {
                type: res.type,
                value: {
                    uuid: res.uuid,
                },
            },
        });
        return success;
    }
    catch (ex) {
        console.error(`assignEffectAsset: ${ex}`);
    }
}
exports.assignEffectAsset = assignEffectAsset;
async function autoAssignTextureAsset(effectCompName, propOfName, nameOfAsset) {
    try {
        console.log('Asset自動掛載啟動');
        const uuids = Editor.Selection.getSelected('node');
        const node = await Editor.Message.request('scene', 'query-node', uuids[0]);
        if (!node) {
            console.warn(`未選中節點`);
            return;
        }
        const index = node.__comps__.findIndex((v) => v.type === effectCompName);
        if (index === -1) {
            console.warn(`節點未掛載${effectCompName}組件`);
            return;
        }
        const url = `db://sprite_effect/texture/${nameOfAsset}`;
        console.log(`url: ${url}`);
        const res = await Editor.Message.request('asset-db', 'query-asset-info', url);
        const success = await Editor.Message.request('scene', 'set-property', {
            uuid: node.uuid.value,
            path: `__comps__.${index}.${propOfName}`,
            dump: {
                type: res.type,
                value: {
                    uuid: res.uuid,
                },
            },
        });
        if (success) {
            console.log(`Texture自動掛載成功`);
        }
        else {
            console.log(`Texture自動掛載失敗`);
        }
    }
    catch (ex) {
        console.error(`autoAssignTextureAsset: ${ex}`);
    }
}
exports.autoAssignTextureAsset = autoAssignTextureAsset;
async function reimportAsset() {
    Editor.Message.request("asset-db", "reimport-asset", "db29d15f-52ac-4502-bf5f-9ffb600ef784");
}
exports.reimportAsset = reimportAsset;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NvdXJjZS91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFPLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxZQUFvQixFQUFFLFVBQW1CO0lBQzdFLElBQUk7UUFDQSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTFCLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuRCxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2pGLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLENBQUM7UUFDaEYsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsWUFBWSxJQUFJLENBQUMsQ0FBQztZQUN4QyxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVELE1BQU0sY0FBYyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RixNQUFNLEdBQUcsR0FBRyw2QkFBNkIsY0FBYyxTQUFTLENBQUM7UUFFakUsTUFB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QUFzQyxDQUFDLENBQUM7QUFDakcsQ0FBQztBQUZELHNDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFzc2lnbkVmZmVjdEFzc2V0KG5hbWVPZkVmZmVjdDogc3RyaW5nLCB1dWlkT2ZOb2RlPzogc3RyaW5nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdFZmZlY3TmjpvovInllZ/li5UnKTtcclxuXHJcbiAgICAgICAgaWYgKCF1dWlkT2ZOb2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHV1aWRzID0gRWRpdG9yLlNlbGVjdGlvbi5nZXRTZWxlY3RlZCgnbm9kZScpO1xyXG4gICAgICAgICAgICB1dWlkT2ZOb2RlID0gdXVpZHNbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBub2RlSW5mbyA9IGF3YWl0IEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ3NjZW5lJywgJ3F1ZXJ5LW5vZGUnLCB1dWlkT2ZOb2RlKTtcclxuICAgICAgICBpZiAoIW5vZGVJbmZvKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOacqumBuOS4reevgOm7nmApO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpbmRleCA9IG5vZGVJbmZvLl9fY29tcHNfXy5maW5kSW5kZXgoKHY6IGFueSkgPT4gdi50eXBlID09PSBuYW1lT2ZFZmZlY3QpO1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihg56+A6bue5pyq5o6b6LyJJHtuYW1lT2ZFZmZlY3R957WE5Lu2YCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVmZmVjdEZpbGVOYW1lID0gbmFtZU9mRWZmZWN0LnJlcGxhY2UoLyhbQS1aXSkvZywgJ18kMScpLnRvTG93ZXJDYXNlKCkuc2xpY2UoMSk7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGRiOi8vc3ByaXRlX2VmZmVjdC9lZmZlY3QvJHtlZmZlY3RGaWxlTmFtZX0uZWZmZWN0YDtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgRWRpdG9yLk1lc3NhZ2UucmVxdWVzdCgnYXNzZXQtZGInLCAncXVlcnktYXNzZXQtaW5mbycsIHVybCk7XHJcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ3NjZW5lJywgJ3NldC1wcm9wZXJ0eScsIHtcclxuICAgICAgICAgICAgdXVpZDogdXVpZE9mTm9kZSxcclxuICAgICAgICAgICAgcGF0aDogYF9fY29tcHNfXy4ke2luZGV4fS5lZmZlY3RBc3NldGAsXHJcbiAgICAgICAgICAgIGR1bXA6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHJlcyEudHlwZSxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXVpZDogcmVzIS51dWlkLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XHJcbiAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYGFzc2lnbkVmZmVjdEFzc2V0OiAke2V4fWApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXV0b0Fzc2lnblRleHR1cmVBc3NldChlZmZlY3RDb21wTmFtZTogc3RyaW5nLCBwcm9wT2ZOYW1lOiBzdHJpbmcsIG5hbWVPZkFzc2V0OiBzdHJpbmcpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0Fzc2V06Ieq5YuV5o6b6LyJ5ZWf5YuVJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHV1aWRzID0gRWRpdG9yLlNlbGVjdGlvbi5nZXRTZWxlY3RlZCgnbm9kZScpO1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSBhd2FpdCBFZGl0b3IuTWVzc2FnZS5yZXF1ZXN0KCdzY2VuZScsICdxdWVyeS1ub2RlJywgdXVpZHNbMF0pO1xyXG4gICAgICAgIGlmICghbm9kZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYOacqumBuOS4reevgOm7nmApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpbmRleCA9IG5vZGUuX19jb21wc19fLmZpbmRJbmRleCgodjogYW55KSA9PiB2LnR5cGUgPT09IGVmZmVjdENvbXBOYW1lKTtcclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihg56+A6bue5pyq5o6b6LyJJHtlZmZlY3RDb21wTmFtZX3ntYTku7ZgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXJsID0gYGRiOi8vc3ByaXRlX2VmZmVjdC90ZXh0dXJlLyR7bmFtZU9mQXNzZXR9YDtcclxuICAgICAgICBjb25zb2xlLmxvZyhgdXJsOiAke3VybH1gKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgRWRpdG9yLk1lc3NhZ2UucmVxdWVzdCgnYXNzZXQtZGInLCAncXVlcnktYXNzZXQtaW5mbycsIHVybCk7XHJcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ3NjZW5lJywgJ3NldC1wcm9wZXJ0eScsIHtcclxuICAgICAgICAgICAgdXVpZDogbm9kZS51dWlkLnZhbHVlIGFzIHN0cmluZyxcclxuICAgICAgICAgICAgcGF0aDogYF9fY29tcHNfXy4ke2luZGV4fS4ke3Byb3BPZk5hbWV9YCxcclxuICAgICAgICAgICAgZHVtcDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogcmVzIS50eXBlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgICAgICB1dWlkOiByZXMhLnV1aWQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoc3VjY2Vzcykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVGV4dHVyZeiHquWLleaOm+i8ieaIkOWKn2ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFRleHR1cmXoh6rli5XmjpvovInlpLHmlZdgKTtcclxuICAgICAgICB9XHJcbiAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYGF1dG9Bc3NpZ25UZXh0dXJlQXNzZXQ6ICR7ZXh9YCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWltcG9ydEFzc2V0KCkge1xyXG4gICAgRWRpdG9yLk1lc3NhZ2UucmVxdWVzdChcImFzc2V0LWRiXCIsIFwicmVpbXBvcnQtYXNzZXRcIiwgXCJkYjI5ZDE1Zi01MmFjLTQ1MDItYmY1Zi05ZmZiNjAwZWY3ODRcIik7XHJcbn0iXX0=