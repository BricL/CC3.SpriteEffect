"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoAssignTextureAsset = exports.autoAssignEffectAsset = exports.reimportAsset = void 0;
async function reimportAsset(effectCompName) {
    const uuids = Editor.Selection.getSelected('node');
    const node = await Editor.Message.request('scene', 'query-node', uuids[0]);
    if (!node) {
        console.warn(`未選中節點`);
        return;
    }
    const index = node.__comps__.findIndex((v) => v.type === effectCompName);
    if (index === -1) {
        console.warn(`節點未掛載${effectCompName}組件`);
        return;
    }
    const effectFileName = effectCompName.replace(/([A-Z])/g, '_$1').toLowerCase().slice(1);
    const url = `db://assets/sprite_effect/effect/${effectFileName}.effect`;
    console.log(`url: ${url}`);
    const res = await Editor.Message.request('asset-db', 'query-asset-info', url);
    await Editor.Message.request("asset-db", "reimport-asset", res.uuid);
}
exports.reimportAsset = reimportAsset;
async function autoAssignEffectAsset(effectCompName) {
    try {
        console.log('Effect自動掛載啟動');
        const uuids = Editor.Selection.getSelected('node');
        const node = await Editor.Message.request('scene', 'query-node', uuids[0]);
        if (!node) {
            console.warn(`未選中節點`);
            return;
        }
        const index = node.__comps__.findIndex((v) => v.type === effectCompName);
        if (index === -1) {
            console.warn(`節點未掛載${effectCompName}組件`);
            return;
        }
        const effectFileName = effectCompName.replace(/([A-Z])/g, '_$1').toLowerCase().slice(1);
        const url = `db://assets/sprite_effect/effect/${effectFileName}.effect`;
        console.log(`url: ${url}`);
        const res = await Editor.Message.request('asset-db', 'query-asset-info', url);
        const success = await Editor.Message.request('scene', 'set-property', {
            uuid: node.uuid.value,
            path: `__comps__.${index}.effectAsset`,
            dump: {
                type: res.type,
                value: {
                    uuid: res.uuid,
                },
            },
        });
        if (success) {
            console.log(`Effect自動掛載成功`);
        }
        else {
            console.log(`Effect自動掛載失敗`);
        }
    }
    catch (ex) {
        console.error(`autoAssignEffectAsset: ${ex}`);
    }
}
exports.autoAssignEffectAsset = autoAssignEffectAsset;
async function autoAssignTextureAsset(effectCompName, propOfName, nameOfAsset) {
    try {
        console.log('Asset自動掛載啟動');
        const uuids = Editor.Selection.getSelected('node');
        const node = await Editor.Message.request('scene', 'query-node', uuids[0]);
        if (!node) {
            console.warn(`未選中節點`);
            return;
        }
        const index = node.__comps__.findIndex((v) => v.type === effectCompName);
        if (index === -1) {
            console.warn(`節點未掛載${effectCompName}組件`);
            return;
        }
        const url = `db://assets/sprite_effect/texture/${nameOfAsset}`;
        console.log(`url: ${url}`);
        const res = await Editor.Message.request('asset-db', 'query-asset-info', url);
        const success = await Editor.Message.request('scene', 'set-property', {
            uuid: node.uuid.value,
            path: `__comps__.${index}.${propOfName}`,
            dump: {
                type: res.type,
                value: {
                    uuid: res.uuid,
                },
            },
        });
        if (success) {
            console.log(`Texture自動掛載成功`);
        }
        else {
            console.log(`Texture自動掛載失敗`);
        }
    }
    catch (ex) {
        console.error(`autoAssignTextureAsset: ${ex}`);
    }
}
exports.autoAssignTextureAsset = autoAssignTextureAsset;
//# sourceMappingURL=data:application/json;base64,