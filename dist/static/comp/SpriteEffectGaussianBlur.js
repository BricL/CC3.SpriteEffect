"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpriteEffectGaussianBlur = exports.BlurDirectionMode = exports.BlurQualityMode = void 0;
const cc_1 = require("cc");
const env_1 = require("cc/env");
const SpriteEffectBase_1 = require("./SpriteEffectBase");
const { ccclass, property } = cc_1._decorator;
var BlurQualityMode;
(function (BlurQualityMode) {
    BlurQualityMode[BlurQualityMode["LOW"] = 0] = "LOW";
    BlurQualityMode[BlurQualityMode["MEDIUM"] = 1] = "MEDIUM";
    BlurQualityMode[BlurQualityMode["HIGH"] = 2] = "HIGH";
})(BlurQualityMode = exports.BlurQualityMode || (exports.BlurQualityMode = {}));
var BlurDirectionMode;
(function (BlurDirectionMode) {
    BlurDirectionMode[BlurDirectionMode["USE_Y_DIRECTION"] = 0] = "USE_Y_DIRECTION";
    BlurDirectionMode[BlurDirectionMode["USE_X_DIRECTION"] = 1] = "USE_X_DIRECTION";
    BlurDirectionMode[BlurDirectionMode["USE_BOTH_DIRECTION"] = 2] = "USE_BOTH_DIRECTION";
})(BlurDirectionMode = exports.BlurDirectionMode || (exports.BlurDirectionMode = {}));
let SpriteEffectGaussianBlur = class SpriteEffectGaussianBlur extends SpriteEffectBase_1.SpriteEffectBase {
    constructor() {
        super(...arguments);
        this._blurQualityMode = BlurQualityMode.LOW;
        this._blurDirectionMode = BlurDirectionMode.USE_BOTH_DIRECTION;
        this._blurFactor = 0.5;
    }
    //#region blurQualityMode
    set blurQualityMode(val) {
        this._blurQualityMode = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.init(this.pixelsUsage);
            this.reflashParams();
        }
        else {
            this.init(this.pixelsUsage);
            this.reflashParams();
        }
    }
    get blurQualityMode() {
        return this._blurQualityMode;
    }
    //#endregion
    //#region blurMode
    set blurDirectionMode(val) {
        this._blurDirectionMode = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.init(this.pixelsUsage);
            this.reflashParams();
        }
        else {
            this.init(this.pixelsUsage);
            this.reflashParams();
        }
    }
    get blurDirectionMode() {
        return this._blurDirectionMode;
    }
    //#endregion
    //#region blur
    set blurFactor(val) {
        this._blurFactor = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this.reflashParams();
        }
    }
    get blurFactor() {
        return this._blurFactor;
    }
    //#endregion
    //#region override
    /**
     * @override SpriteEffectBase
     */
    get floatUsage() {
        return 16;
    }
    /**
     * @override SpriteEffectBase
     */
    getPropsUnionKey() {
        return `${this.constructor.name}_${this._is2Din3D}_${this._blurQualityMode}_${this._blurDirectionMode}`;
    }
    /**
     * @override SpriteEffectBase
     */
    updateParams(index, propBuffer) {
        const baseUV = this.getUV(this.spriteFrame.uv);
        let blurTextureSize = new cc_1.Vec2(100, 100);
        if (this.spriteFrame) {
            blurTextureSize.x = Math.floor(this.spriteFrame.width * baseUV.z);
            blurTextureSize.y = Math.floor(this.spriteFrame.height * baseUV.w);
        }
        else {
            blurTextureSize.x = this.node.getComponent(cc_1.UITransform).contentSize.width;
            blurTextureSize.y = this.node.getComponent(cc_1.UITransform).contentSize.height;
        }
        propBuffer[index + 0] = this._effectColor.r / 255;
        propBuffer[index + 1] = this._effectColor.g / 255;
        propBuffer[index + 2] = this._effectColor.b / 255;
        propBuffer[index + 3] = this._effectColor.a / 255;
        propBuffer[index + 4] = baseUV.x;
        propBuffer[index + 5] = baseUV.y;
        propBuffer[index + 6] = baseUV.z;
        propBuffer[index + 7] = baseUV.w;
        propBuffer[index + 8] = blurTextureSize.x;
        propBuffer[index + 9] = blurTextureSize.y;
        propBuffer[index + 10] = cc_1.lerp(0.0, 3.0, this._blurFactor);
    }
    /**
     * @override SpriteEffectBase
     */
    initMaterial() {
        let mat = new cc_1.Material();
        let define_macro = {
            HIGH: false,
            MEDIUM: false,
            USE_Y_DIRECTION: false,
            USE_X_DIRECTION: false,
        };
        switch (this._blurQualityMode) {
            case BlurQualityMode.HIGH:
                define_macro.HIGH = true;
                break;
            case BlurQualityMode.MEDIUM:
                define_macro.MEDIUM = true;
                break;
        }
        switch (this._blurDirectionMode) {
            case BlurDirectionMode.USE_Y_DIRECTION:
                define_macro.USE_Y_DIRECTION = true;
                break;
            case BlurDirectionMode.USE_X_DIRECTION:
                define_macro.USE_X_DIRECTION = true;
                break;
        }
        mat.initialize({
            effectAsset: this.effectAsset,
            defines: define_macro,
            technique: this._is2Din3D ? 1 : 0
        });
        return mat;
    }
};
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_1.Enum(BlurQualityMode), tooltip: "模糊品質" })
], SpriteEffectGaussianBlur.prototype, "blurQualityMode", null);
__decorate([
    property({ type: cc_1.Enum(BlurQualityMode) })
], SpriteEffectGaussianBlur.prototype, "_blurQualityMode", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_1.Enum(BlurDirectionMode), tooltip: "模糊模式" })
], SpriteEffectGaussianBlur.prototype, "blurDirectionMode", null);
__decorate([
    property({ type: cc_1.Enum(BlurDirectionMode) })
], SpriteEffectGaussianBlur.prototype, "_blurDirectionMode", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '模糊程度' })
], SpriteEffectGaussianBlur.prototype, "blurFactor", null);
__decorate([
    property
], SpriteEffectGaussianBlur.prototype, "_blurFactor", void 0);
SpriteEffectGaussianBlur = __decorate([
    ccclass('SpriteEffectGaussianBlur')
], SpriteEffectGaussianBlur);
exports.SpriteEffectGaussianBlur = SpriteEffectGaussianBlur;
//# sourceMappingURL=data:application/json;base64,