"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SpriteEffectBase_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpriteEffectBase = void 0;
const cc_1 = require("cc");
const env_1 = require("cc/env");
const { ccclass, property } = cc_1._decorator;
let SpriteEffectBase = SpriteEffectBase_1 = class SpriteEffectBase extends cc_1.Sprite {
    constructor() {
        super(...arguments);
        // protected static _s_effectProps = new Map<string, EffectProps[]>();
        this.effectAsset = null;
        this._instanceID = -1;
        this._effectColor = new cc_1.Color(255, 255, 255, 255);
        this._is2Din3D = false;
    }
    //#region effectColor
    set effectColor(val) {
        this._effectColor = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this.reflashParams();
        }
    }
    get effectColor() {
        return this._effectColor;
    }
    //#endregion
    //#region is2Din3D
    set is2Din3D(val) {
        this._is2Din3D = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.init(this.pixelsUsage);
            this.reflashParams();
        }
        else {
            this.reflashParams();
        }
    }
    get is2Din3D() {
        return this._is2Din3D;
    }
    //#endregion
    //#region methods
    /**
     * 4個float為一個pixel，需使用幾個pixel數量
     */
    get pixelsUsage() {
        return Math.pow(2, Math.ceil(Math.log(this.floatUsage) / Math.log(2))) / 4;
    }
    calBufferIndex(x, y, w) {
        return (x + (y * w)) * 4;
    }
    init(pixelsUsage) {
        const unionKey = this.getEffectUnionKey();
        cc_1.log(`init: ${unionKey}`);
        // Step1: 取的當前的effectIndex
        if (!SpriteEffectBase_1._s_effectMap.has(unionKey)) {
            let effectData = {
                data: [],
                uuids: []
            };
            effectData.data.push({
                mat: null,
                propBuffer: null,
                propTexture: null,
                isDirty: false,
            });
            SpriteEffectBase_1._s_effectMap.set(unionKey, effectData);
            // const temp = new Array(768).fill("");  // R/G/B (0~255) => 256 * 3 = 768
            // SpriteEffectBase._s_effectMap.set(unionKey, temp);
        }
        const effectData = SpriteEffectBase_1._s_effectMap.get(unionKey);
        this._instanceID = effectData.uuids.findIndex((v) => v === this.node.uuid);
        if (this._instanceID === -1) {
            this._instanceID = effectData.uuids.findIndex((v) => v === "");
            if (this._instanceID === -1) {
                this._instanceID = effectData.uuids.push(this.node.uuid) - 1;
                if (effectData.data.length < Math.floor(this._instanceID / 256) + 1) {
                    effectData.data.push({
                        mat: null,
                        propBuffer: null,
                        propTexture: null,
                        isDirty: false,
                    });
                }
            }
            else {
                effectData.uuids[this._instanceID] = this.node.uuid;
            }
        }
        const idx = Math.floor(this._instanceID / 256);
        this.color = new cc_1.Color(this._instanceID % 256, pixelsUsage, 0, 255);
        // SpriteEffectBase._s_effectMap.get(unionKey)![this._instanceID] = this.node.uuid;
        // if (this.instanceGroupIdx === 0) {
        //     this.color = new Color(this._instanceID, 0, 0, 255);
        // } else if (this.instanceGroupIdx === 1) {
        //     this.color = new Color(255, (this._instanceID - 255), 0, 255);
        // } else if (this.instanceGroupIdx === 2) {
        //     this.color = new Color(255, 255, (this._instanceID - 510), 255);
        // } else {
        //     error(`The prop group index, ${this.instanceGroupIdx}, is out of range!`);
        //     return;
        // }
        // Step2: 初始化Effect props
        if (effectData.data[idx].mat === null) {
            const w = 256;
            const h = pixelsUsage;
            let propBuffer = new Float32Array(w * h * 4);
            for (let y = 0; y < h; y++) {
                for (let x = 0; x < w; x++) {
                    const index = (x + (y * w)) * 4;
                    propBuffer[index] = 1;
                    propBuffer[index + 1] = 0;
                    propBuffer[index + 2] = 1;
                    propBuffer[index + 3] = 1;
                }
            }
            let propsTexture = new cc_1.Texture2D();
            propsTexture.setFilters(cc_1.Texture2D.Filter.NEAREST, cc_1.Texture2D.Filter.NEAREST);
            propsTexture.reset({
                width: w,
                height: h,
                format: cc_1.Texture2D.PixelFormat.RGBA32F,
                mipmapLevel: 0
            });
            propsTexture.uploadData(propBuffer);
            let mat = this.initMaterial();
            mat.setProperty('propsTexture', propsTexture);
            effectData.data[idx] = {
                mat: mat,
                propBuffer: propBuffer,
                propTexture: propsTexture,
                isDirty: false
            };
        }
        this.customMaterial = effectData.data[idx].mat;
        // if (!SpriteEffectBase._s_effectProps.has(unionKey)) {
        //     const temp = new Array(3).fill(null); // Only use R/G/B 3 channels
        //     SpriteEffectBase._s_effectProps.set(unionKey, temp);
        // }
        // if (SpriteEffectBase._s_effectProps.get(unionKey)![this.instanceGroupIdx] === null) {
        //     const w = 256 * countOfProps;
        //     const h = 1;
        //     let propBuffer = new Float32Array(w * h * 4);
        //     for (let y = 0; y < h; y++) {
        //         for (let x = 0; x < w; x++) {
        //             const index = (y * w + x) * 4;
        //             propBuffer[index] = 1;
        //             propBuffer[index + 1] = 0;
        //             propBuffer[index + 2] = 1;
        //             propBuffer[index + 3] = 1;
        //         }
        //     }
        //     let propsTexture = new Texture2D();
        //     propsTexture.setFilters(Texture2D.Filter.NEAREST, Texture2D.Filter.NEAREST);
        //     propsTexture.reset({
        //         width: w,
        //         height: h,
        //         format: Texture2D.PixelFormat.RGBA32F,
        //         mipmapLevel: 0
        //     });
        //     propsTexture.uploadData(propBuffer);
        //     let mat = this.initMaterial();
        //     mat.setProperty('propsTexture', propsTexture);
        //     SpriteEffectBase._s_effectProps.get(unionKey)![this.instanceGroupIdx] = {
        //         mat: mat,
        //         propBuffer: propBuffer,
        //         propTexture: propsTexture,
        //         isDirty: false
        //     };
        // }
        // this.customMaterial = SpriteEffectBase._s_effectProps.get(unionKey)![this.instanceGroupIdx].mat;
    }
    reflashParams() {
        const unionKey = this.getEffectUnionKey();
        const idx = Math.floor(this._instanceID / 256);
        const effectProps = SpriteEffectBase_1._s_effectMap.get(unionKey).data[idx];
        // Update the effect parameters from the DERIVED class.
        this.updateParams(this._instanceID % 256, 255, effectProps.propBuffer);
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            // In Editor mode, upload the data directly.
            effectProps.propTexture.uploadData(effectProps.propBuffer);
        }
        else {
            // In Preview mode, wait for the lateUpdate to upload the data.
            effectProps.isDirty = true;
        }
        // const index = this.getBufferIndex();
        // const effectProps = SpriteEffectBase._s_effectProps.get(unionKey)![this.instanceGroupIdx];
        // // Update the effect parameters from the DERIVED class.
        // this.updateParams(index, effectProps.propBuffer!);
        // if (EDITOR_NOT_IN_PREVIEW) {
        //     // In Editor mode, upload the data directly.
        //     effectProps.propTexture!.uploadData(effectProps.propBuffer!);
        // }
        // else {
        //     // In Preview mode, wait for the lateUpdate to upload the data.
        //     effectProps.isDirty = true;
        // }
    }
    /**
     * 每256個為一組
     */
    get instanceGroupIdx() {
        return Math.floor(this._instanceID / 256);
    }
    getBufferIndex() {
        const offset = this._instanceID - (this.instanceGroupIdx * 256);
        return offset * (this.pixelsUsage * 4);
    }
    /**
     * 取得 Sprite 的 UV 最小、最大值及寬高
     * @param uv
     * @returns vec4 (minU, minV, width, height)
     */
    getUV(uv) {
        let minU = Math.min(uv[0], uv[2], uv[4], uv[6]);
        let minV = Math.min(uv[1], uv[3], uv[5], uv[7]);
        let maxU = Math.max(uv[0], uv[2], uv[4], uv[6]);
        let maxV = Math.max(uv[1], uv[3], uv[5], uv[7]);
        let width = maxU - minU;
        let height = maxV - minV;
        return new cc_1.Vec4(minU, minV, width, height);
    }
    //#endregion
    //#region life cycle
    onLoad() {
        this.init(this.pixelsUsage);
    }
    start() {
        this.reflashParams();
    }
    onDestroy() {
        const unionKey = this.getEffectUnionKey();
        const effectData = SpriteEffectBase_1._s_effectMap.get(unionKey);
        const idx = effectData.uuids.findIndex((v) => v === this.node.uuid);
        if (idx === -1) {
            cc_1.error("Effect index is not found!");
        }
        else {
            this._instanceID = -1;
            effectData.uuids[idx] = "";
        }
        // if (SpriteEffectBase._s_effectMap.has(unionKey)) {
        //     const index = SpriteEffectBase._s_effectMap.get(unionKey)!.findIndex((v) => v === this.node.uuid);
        //     if (index === -1) {
        //         error("Effect index is not found!");
        //         return;
        //     }
        //     SpriteEffectBase._s_effectMap.get(unionKey)![index] = "";
        // } else {
        //     error(`The effect map of ${unionKey} is not found!`);
        // }
    }
    lateUpdate(dt) {
        const unionKey = this.getEffectUnionKey();
        const effectData = SpriteEffectBase_1._s_effectMap.get(unionKey);
        const idx = Math.floor(this._instanceID / 256);
        const effectProps = effectData.data[idx];
        if (effectProps.isDirty) {
            effectProps.propTexture.uploadData(effectProps.propBuffer);
            effectProps.isDirty = false;
        }
        // const effectProps = SpriteEffectBase._s_effectProps.get(unionKey)![this.instanceGroupIdx];
        // if (effectProps.isDirty) {
        //     // log(`${this.constructor.name}'s effect props is DIRTY!`);
        //     effectProps.propTexture!.uploadData(effectProps.propBuffer!);
        //     effectProps.isDirty = false;
        // }
    }
};
SpriteEffectBase._s_effectMap = new Map();
__decorate([
    property({ type: cc_1.EffectAsset, tooltip: '指定效果EffectAsset' })
], SpriteEffectBase.prototype, "effectAsset", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_1.Color, tooltip: "My Color" })
], SpriteEffectBase.prototype, "effectColor", null);
__decorate([
    property
], SpriteEffectBase.prototype, "_effectColor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: '當使用RenderRoot2D時使用' })
], SpriteEffectBase.prototype, "is2Din3D", null);
__decorate([
    property
], SpriteEffectBase.prototype, "_is2Din3D", void 0);
SpriteEffectBase = SpriteEffectBase_1 = __decorate([
    ccclass('SpriteEffectBase')
], SpriteEffectBase);
exports.SpriteEffectBase = SpriteEffectBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3ByaXRlRWZmZWN0QmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9zdGF0aWMvY29tcC9TcHJpdGVFZmZlY3RCYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSwyQkFBbUc7QUFDbkcsZ0NBQStDO0FBQy9DLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsZUFBVSxDQUFDO0FBZXpDLElBQXNCLGdCQUFnQix3QkFBdEMsTUFBc0IsZ0JBQWlCLFNBQVEsV0FBTTtJQUFyRDs7UUFFSSxzRUFBc0U7UUFHL0QsZ0JBQVcsR0FBdUIsSUFBSSxDQUFDO1FBRXBDLGdCQUFXLEdBQVcsQ0FBQyxDQUFDLENBQUM7UUFvQnpCLGlCQUFZLEdBQVUsSUFBSSxVQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUF1QnBELGNBQVMsR0FBWSxLQUFLLENBQUM7SUFtVHpDLENBQUM7SUE1VkcscUJBQXFCO0lBRXJCLElBQVcsV0FBVyxDQUFDLEdBQVU7UUFDN0IsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7UUFFeEIsSUFBSSwyQkFBcUIsRUFBRTtZQUN2QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDeEI7YUFDSTtZQUNELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN4QjtJQUNMLENBQUM7SUFFRCxJQUFXLFdBQVc7UUFDbEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFJRCxZQUFZO0lBR1osa0JBQWtCO0lBRWxCLElBQVcsUUFBUSxDQUFDLEdBQVk7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFFckIsSUFBSSwyQkFBcUIsRUFBRTtZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsYUFBYSxFQUFF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QUMsa0JBQWtCLENBQUM7R0FDTixnQkFBZ0IsQ0FxV3JDO0FBcldxQiw0Q0FBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb2xvciwgRWZmZWN0QXNzZXQsIGVycm9yLCBsb2csIE1hdGVyaWFsLCBTcHJpdGUsIFRleHR1cmUyRCwgVmVjNCB9IGZyb20gXCJjY1wiO1xuaW1wb3J0IHsgRURJVE9SX05PVF9JTl9QUkVWSUVXIH0gZnJvbSBcImNjL2VudlwiO1xuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcblxudHlwZSBFZmZlY3RQcm9wcyA9IHtcbiAgICBtYXQ6IE1hdGVyaWFsIHwgbnVsbDtcbiAgICBwcm9wQnVmZmVyOiBGbG9hdDMyQXJyYXkgfCBudWxsO1xuICAgIHByb3BUZXh0dXJlOiBUZXh0dXJlMkQgfCBudWxsO1xuICAgIGlzRGlydHk6IGJvb2xlYW47XG59XG5cbnR5cGUgRWZmZWN0RGF0YSA9IHtcbiAgICBkYXRhOiBFZmZlY3RQcm9wc1tdO1xuICAgIHV1aWRzOiBzdHJpbmdbXTtcbn1cblxuQGNjY2xhc3MoJ1Nwcml0ZUVmZmVjdEJhc2UnKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNwcml0ZUVmZmVjdEJhc2UgZXh0ZW5kcyBTcHJpdGUge1xuICAgIHByb3RlY3RlZCBzdGF0aWMgX3NfZWZmZWN0TWFwID0gbmV3IE1hcDxzdHJpbmcsIEVmZmVjdERhdGE+KCk7XG4gICAgLy8gcHJvdGVjdGVkIHN0YXRpYyBfc19lZmZlY3RQcm9wcyA9IG5ldyBNYXA8c3RyaW5nLCBFZmZlY3RQcm9wc1tdPigpO1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogRWZmZWN0QXNzZXQsIHRvb2x0aXA6ICfmjIflrprmlYjmnpxFZmZlY3RBc3NldCcgfSlcbiAgICBwdWJsaWMgZWZmZWN0QXNzZXQ6IEVmZmVjdEFzc2V0IHwgbnVsbCA9IG51bGw7XG5cbiAgICBwcm90ZWN0ZWQgX2luc3RhbmNlSUQ6IG51bWJlciA9IC0xO1xuXG4gICAgLy8jcmVnaW9uIGVmZmVjdENvbG9yXG4gICAgQHByb3BlcnR5KHsgZ3JvdXA6IHsgbmFtZTogXCJTZXR0ZXIvR2V0dGVyXCIsIGlkOiBcIjFcIiB9LCB0eXBlOiBDb2xvciwgdG9vbHRpcDogXCJNeSBDb2xvclwiIH0pXG4gICAgcHVibGljIHNldCBlZmZlY3RDb2xvcih2YWw6IENvbG9yKSB7XG4gICAgICAgIHRoaXMuX2VmZmVjdENvbG9yID0gdmFsO1xuXG4gICAgICAgIGlmIChFRElUT1JfTk9UX0lOX1BSRVZJRVcpIHtcbiAgICAgICAgICAgIHRoaXMucmVmbGFzaFBhcmFtcygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWZsYXNoUGFyYW1zKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGVmZmVjdENvbG9yKCk6IENvbG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VmZmVjdENvbG9yO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eVxuICAgIHByb3RlY3RlZCBfZWZmZWN0Q29sb3I6IENvbG9yID0gbmV3IENvbG9yKDI1NSwgMjU1LCAyNTUsIDI1NSk7XG4gICAgLy8jZW5kcmVnaW9uXG5cblxuICAgIC8vI3JlZ2lvbiBpczJEaW4zRFxuICAgIEBwcm9wZXJ0eSh7IGdyb3VwOiB7IG5hbWU6IFwiU2V0dGVyL0dldHRlclwiLCBpZDogXCIxXCIgfSwgdG9vbHRpcDogJ+eVtuS9v+eUqFJlbmRlclJvb3QyROaZguS9v+eUqCcgfSlcbiAgICBwdWJsaWMgc2V0IGlzMkRpbjNEKHZhbDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9pczJEaW4zRCA9IHZhbDtcblxuICAgICAgICBpZiAoRURJVE9SX05PVF9JTl9QUkVWSUVXKSB7XG4gICAgICAgICAgICB0aGlzLmluaXQodGhpcy5waXhlbHNVc2FnZSk7XG4gICAgICAgICAgICB0aGlzLnJlZmxhc2hQYXJhbXMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVmbGFzaFBhcmFtcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpczJEaW4zRCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzMkRpbjNEO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eVxuICAgIHByb3RlY3RlZCBfaXMyRGluM0Q6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAvLyNlbmRyZWdpb25cblxuXG4gICAgLy8jcmVnaW9uIGFic3RyYWN0IG1ldGhvZHNcbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBSZXR1cm4gdGhlIGNvdW50IG9mIHVzZWQgZmxvYXRzIG9mIHRoZSBlZmZlY3QuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldCBmbG9hdFVzYWdlKCk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEBhYnN0cmFjdCBcbiAgICAgKiBHZW5lcmF0ZSBhIFVuaW9uIGtleSBmb3IgdGhlIGVmZmVjdC5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0RWZmZWN0VW5pb25LZXkoKTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQGFic3RyYWN0XG4gICAgICogVXBkYXRlIHRoZSBlZmZlY3QgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICAvLyBwcm90ZWN0ZWQgYWJzdHJhY3QgdXBkYXRlUGFyYW1zKGluZGV4OiBudW1iZXIsIHByb3BCdWZmZXI6IEZsb2F0MzJBcnJheSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHVwZGF0ZVBhcmFtcyhpZHg6IG51bWJlciwgdGV4dHVyZVdpZHRoOiBudW1iZXIsIHByb3BCdWZmZXI6IEZsb2F0MzJBcnJheSk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBAYWJzdHJhY3RcbiAgICAgKiBJbml0aWFsaXplIHRoZSBtYXRlcmlhbC5cbiAgICAgKiBAcmV0dXJucyBNYXRlcmlhbFxuICAgICovXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGluaXRNYXRlcmlhbCgpOiBNYXRlcmlhbDtcbiAgICAvLyNlbmRyZWdpb25cblxuXG4gICAgLy8jcmVnaW9uIG1ldGhvZHNcbiAgICAvKipcbiAgICAgKiA05YCLZmxvYXTngrrkuIDlgItwaXhlbO+8jOmcgOS9v+eUqOW5vuWAi3BpeGVs5pW46YePXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldCBwaXhlbHNVc2FnZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3coMiwgTWF0aC5jZWlsKE1hdGgubG9nKHRoaXMuZmxvYXRVc2FnZSkgLyBNYXRoLmxvZygyKSkpIC8gNDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY2FsQnVmZmVySW5kZXgoeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAoeCArICh5ICogdykpICogNDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdChwaXhlbHNVc2FnZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHVuaW9uS2V5ID0gdGhpcy5nZXRFZmZlY3RVbmlvbktleSgpO1xuICAgICAgICBsb2coYGluaXQ6ICR7dW5pb25LZXl9YCk7XG5cbiAgICAgICAgLy8gU3RlcDE6IOWPlueahOeVtuWJjeeahGVmZmVjdEluZGV4XG4gICAgICAgIGlmICghU3ByaXRlRWZmZWN0QmFzZS5fc19lZmZlY3RNYXAuaGFzKHVuaW9uS2V5KSkge1xuICAgICAgICAgICAgbGV0IGVmZmVjdERhdGE6IEVmZmVjdERhdGEgPSB7XG4gICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgdXVpZHM6IFtdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBlZmZlY3REYXRhLmRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgbWF0OiBudWxsLFxuICAgICAgICAgICAgICAgIHByb3BCdWZmZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJvcFRleHR1cmU6IG51bGwsXG4gICAgICAgICAgICAgICAgaXNEaXJ0eTogZmFsc2UsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgU3ByaXRlRWZmZWN0QmFzZS5fc19lZmZlY3RNYXAuc2V0KHVuaW9uS2V5LCBlZmZlY3REYXRhKTtcbiAgICAgICAgICAgIC8vIGNvbnN0IHRlbXAgPSBuZXcgQXJyYXkoNzY4KS5maWxsKFwiXCIpOyAgLy8gUi9HL0IgKDB+MjU1KSA9PiAyNTYgKiAzID0gNzY4XG4gICAgICAgICAgICAvLyBTcHJpdGVFZmZlY3RCYXNlLl9zX2VmZmVjdE1hcC5zZXQodW5pb25LZXksIHRlbXApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZWZmZWN0RGF0YSA9IFNwcml0ZUVmZmVjdEJhc2UuX3NfZWZmZWN0TWFwLmdldCh1bmlvbktleSkhO1xuXG4gICAgICAgIHRoaXMuX2luc3RhbmNlSUQgPSBlZmZlY3REYXRhLnV1aWRzLmZpbmRJbmRleCgodikgPT4gdiA9PT0gdGhpcy5ub2RlLnV1aWQpO1xuICAgICAgICBpZiAodGhpcy5faW5zdGFuY2VJRCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSUQgPSBlZmZlY3REYXRhLnV1aWRzLmZpbmRJbmRleCgodikgPT4gdiA9PT0gXCJcIik7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2VJRCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZUlEID0gZWZmZWN0RGF0YS51dWlkcy5wdXNoKHRoaXMubm9kZS51dWlkKSAtIDE7XG5cbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0RGF0YS5kYXRhLmxlbmd0aCA8IE1hdGguZmxvb3IodGhpcy5faW5zdGFuY2VJRCAvIDI1NikgKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdERhdGEuZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BCdWZmZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wVGV4dHVyZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlydHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVmZmVjdERhdGEudXVpZHNbdGhpcy5faW5zdGFuY2VJRF0gPSB0aGlzLm5vZGUudXVpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlkeCA9IE1hdGguZmxvb3IodGhpcy5faW5zdGFuY2VJRCAvIDI1Nik7XG4gICAgICAgIHRoaXMuY29sb3IgPSBuZXcgQ29sb3IodGhpcy5faW5zdGFuY2VJRCAlIDI1NiwgcGl4ZWxzVXNhZ2UsIDAsIDI1NSk7XG5cbiAgICAgICAgLy8gU3ByaXRlRWZmZWN0QmFzZS5fc19lZmZlY3RNYXAuZ2V0KHVuaW9uS2V5KSFbdGhpcy5faW5zdGFuY2VJRF0gPSB0aGlzLm5vZGUudXVpZDtcblxuICAgICAgICAvLyBpZiAodGhpcy5pbnN0YW5jZUdyb3VwSWR4ID09PSAwKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmNvbG9yID0gbmV3IENvbG9yKHRoaXMuX2luc3RhbmNlSUQsIDAsIDAsIDI1NSk7XG4gICAgICAgIC8vIH0gZWxzZSBpZiAodGhpcy5pbnN0YW5jZUdyb3VwSWR4ID09PSAxKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmNvbG9yID0gbmV3IENvbG9yKDI1NSwgKHRoaXMuX2luc3RhbmNlSUQgLSAyNTUpLCAwLCAyNTUpO1xuICAgICAgICAvLyB9IGVsc2UgaWYgKHRoaXMuaW5zdGFuY2VHcm91cElkeCA9PT0gMikge1xuICAgICAgICAvLyAgICAgdGhpcy5jb2xvciA9IG5ldyBDb2xvcigyNTUsIDI1NSwgKHRoaXMuX2luc3RhbmNlSUQgLSA1MTApLCAyNTUpO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgZXJyb3IoYFRoZSBwcm9wIGdyb3VwIGluZGV4LCAke3RoaXMuaW5zdGFuY2VHcm91cElkeH0sIGlzIG91dCBvZiByYW5nZSFgKTtcbiAgICAgICAgLy8gICAgIHJldHVybjtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIFN0ZXAyOiDliJ3lp4vljJZFZmZlY3QgcHJvcHNcbiAgICAgICAgaWYgKGVmZmVjdERhdGEuZGF0YVtpZHhdLm1hdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgdyA9IDI1NjtcbiAgICAgICAgICAgIGNvbnN0IGggPSBwaXhlbHNVc2FnZTtcblxuICAgICAgICAgICAgbGV0IHByb3BCdWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KHcgKiBoICogNCk7XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGg7IHkrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdzsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gKHggKyAoeSAqIHcpKSAqIDQ7XG4gICAgICAgICAgICAgICAgICAgIHByb3BCdWZmZXJbaW5kZXhdID0gMTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcEJ1ZmZlcltpbmRleCArIDFdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcHJvcEJ1ZmZlcltpbmRleCArIDJdID0gMTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcEJ1ZmZlcltpbmRleCArIDNdID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBwcm9wc1RleHR1cmUgPSBuZXcgVGV4dHVyZTJEKCk7XG4gICAgICAgICAgICBwcm9wc1RleHR1cmUuc2V0RmlsdGVycyhUZXh0dXJlMkQuRmlsdGVyLk5FQVJFU1QsIFRleHR1cmUyRC5GaWx0ZXIuTkVBUkVTVCk7XG4gICAgICAgICAgICBwcm9wc1RleHR1cmUucmVzZXQoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3LFxuICAgICAgICAgICAgICAgIGhlaWdodDogaCxcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IFRleHR1cmUyRC5QaXhlbEZvcm1hdC5SR0JBMzJGLFxuICAgICAgICAgICAgICAgIG1pcG1hcExldmVsOiAwXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcHJvcHNUZXh0dXJlLnVwbG9hZERhdGEocHJvcEJ1ZmZlcik7XG5cbiAgICAgICAgICAgIGxldCBtYXQgPSB0aGlzLmluaXRNYXRlcmlhbCgpO1xuICAgICAgICAgICAgbWF0LnNldFByb3BlcnR5KCdwcm9wc1RleHR1cmUnLCBwcm9wc1RleHR1cmUpO1xuXG4gICAgICAgICAgICBlZmZlY3REYXRhLmRhdGFbaWR4XSA9IHtcbiAgICAgICAgICAgICAgICBtYXQ6IG1hdCxcbiAgICAgICAgICAgICAgICBwcm9wQnVmZmVyOiBwcm9wQnVmZmVyLFxuICAgICAgICAgICAgICAgIHByb3BUZXh0dXJlOiBwcm9wc1RleHR1cmUsXG4gICAgICAgICAgICAgICAgaXNEaXJ0eTogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmN1c3RvbU1hdGVyaWFsID0gZWZmZWN0RGF0YS5kYXRhW2lkeF0ubWF0O1xuXG4gICAgICAgIC8vIGlmICghU3ByaXRlRWZmZWN0QmFzZS5fc19lZmZlY3RQcm9wcy5oYXModW5pb25LZXkpKSB7XG4gICAgICAgIC8vICAgICBjb25zdCB0ZW1wID0gbmV3IEFycmF5KDMpLmZpbGwobnVsbCk7IC8vIE9ubHkgdXNlIFIvRy9CIDMgY2hhbm5lbHNcbiAgICAgICAgLy8gICAgIFNwcml0ZUVmZmVjdEJhc2UuX3NfZWZmZWN0UHJvcHMuc2V0KHVuaW9uS2V5LCB0ZW1wKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIGlmIChTcHJpdGVFZmZlY3RCYXNlLl9zX2VmZmVjdFByb3BzLmdldCh1bmlvbktleSkhW3RoaXMuaW5zdGFuY2VHcm91cElkeF0gPT09IG51bGwpIHtcbiAgICAgICAgLy8gICAgIGNvbnN0IHcgPSAyNTYgKiBjb3VudE9mUHJvcHM7XG4gICAgICAgIC8vICAgICBjb25zdCBoID0gMTtcblxuICAgICAgICAvLyAgICAgbGV0IHByb3BCdWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KHcgKiBoICogNCk7XG4gICAgICAgIC8vICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGg7IHkrKykge1xuICAgICAgICAvLyAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdzsgeCsrKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gKHkgKiB3ICsgeCkgKiA0O1xuICAgICAgICAvLyAgICAgICAgICAgICBwcm9wQnVmZmVyW2luZGV4XSA9IDE7XG4gICAgICAgIC8vICAgICAgICAgICAgIHByb3BCdWZmZXJbaW5kZXggKyAxXSA9IDA7XG4gICAgICAgIC8vICAgICAgICAgICAgIHByb3BCdWZmZXJbaW5kZXggKyAyXSA9IDE7XG4gICAgICAgIC8vICAgICAgICAgICAgIHByb3BCdWZmZXJbaW5kZXggKyAzXSA9IDE7XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuXG4gICAgICAgIC8vICAgICBsZXQgcHJvcHNUZXh0dXJlID0gbmV3IFRleHR1cmUyRCgpO1xuICAgICAgICAvLyAgICAgcHJvcHNUZXh0dXJlLnNldEZpbHRlcnMoVGV4dHVyZTJELkZpbHRlci5ORUFSRVNULCBUZXh0dXJlMkQuRmlsdGVyLk5FQVJFU1QpO1xuICAgICAgICAvLyAgICAgcHJvcHNUZXh0dXJlLnJlc2V0KHtcbiAgICAgICAgLy8gICAgICAgICB3aWR0aDogdyxcbiAgICAgICAgLy8gICAgICAgICBoZWlnaHQ6IGgsXG4gICAgICAgIC8vICAgICAgICAgZm9ybWF0OiBUZXh0dXJlMkQuUGl4ZWxGb3JtYXQuUkdCQTMyRixcbiAgICAgICAgLy8gICAgICAgICBtaXBtYXBMZXZlbDogMFxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vICAgICBwcm9wc1RleHR1cmUudXBsb2FkRGF0YShwcm9wQnVmZmVyKTtcblxuICAgICAgICAvLyAgICAgbGV0IG1hdCA9IHRoaXMuaW5pdE1hdGVyaWFsKCk7XG4gICAgICAgIC8vICAgICBtYXQuc2V0UHJvcGVydHkoJ3Byb3BzVGV4dHVyZScsIHByb3BzVGV4dHVyZSk7XG5cbiAgICAgICAgLy8gICAgIFNwcml0ZUVmZmVjdEJhc2UuX3NfZWZmZWN0UHJvcHMuZ2V0KHVuaW9uS2V5KSFbdGhpcy5pbnN0YW5jZUdyb3VwSWR4XSA9IHtcbiAgICAgICAgLy8gICAgICAgICBtYXQ6IG1hdCxcbiAgICAgICAgLy8gICAgICAgICBwcm9wQnVmZmVyOiBwcm9wQnVmZmVyLFxuICAgICAgICAvLyAgICAgICAgIHByb3BUZXh0dXJlOiBwcm9wc1RleHR1cmUsXG4gICAgICAgIC8vICAgICAgICAgaXNEaXJ0eTogZmFsc2VcbiAgICAgICAgLy8gICAgIH07XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyB0aGlzLmN1c3RvbU1hdGVyaWFsID0gU3ByaXRlRWZmZWN0QmFzZS5fc19lZmZlY3RQcm9wcy5nZXQodW5pb25LZXkpIVt0aGlzLmluc3RhbmNlR3JvdXBJZHhdLm1hdDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVmbGFzaFBhcmFtcygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdW5pb25LZXkgPSB0aGlzLmdldEVmZmVjdFVuaW9uS2V5KCk7XG4gICAgICAgIGNvbnN0IGlkeCA9IE1hdGguZmxvb3IodGhpcy5faW5zdGFuY2VJRCAvIDI1Nik7XG4gICAgICAgIGNvbnN0IGVmZmVjdFByb3BzID0gU3ByaXRlRWZmZWN0QmFzZS5fc19lZmZlY3RNYXAuZ2V0KHVuaW9uS2V5KSEuZGF0YVtpZHhdO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgZWZmZWN0IHBhcmFtZXRlcnMgZnJvbSB0aGUgREVSSVZFRCBjbGFzcy5cbiAgICAgICAgdGhpcy51cGRhdGVQYXJhbXModGhpcy5faW5zdGFuY2VJRCAlIDI1NiwgMjU1LCBlZmZlY3RQcm9wcy5wcm9wQnVmZmVyISk7XG5cbiAgICAgICAgaWYgKEVESVRPUl9OT1RfSU5fUFJFVklFVykge1xuICAgICAgICAgICAgLy8gSW4gRWRpdG9yIG1vZGUsIHVwbG9hZCB0aGUgZGF0YSBkaXJlY3RseS5cbiAgICAgICAgICAgIGVmZmVjdFByb3BzLnByb3BUZXh0dXJlIS51cGxvYWREYXRhKGVmZmVjdFByb3BzLnByb3BCdWZmZXIhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEluIFByZXZpZXcgbW9kZSwgd2FpdCBmb3IgdGhlIGxhdGVVcGRhdGUgdG8gdXBsb2FkIHRoZSBkYXRhLlxuICAgICAgICAgICAgZWZmZWN0UHJvcHMuaXNEaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb25zdCBpbmRleCA9IHRoaXMuZ2V0QnVmZmVySW5kZXgoKTtcbiAgICAgICAgLy8gY29uc3QgZWZmZWN0UHJvcHMgPSBTcHJpdGVFZmZlY3RCYXNlLl9zX2VmZmVjdFByb3BzLmdldCh1bmlvbktleSkhW3RoaXMuaW5zdGFuY2VHcm91cElkeF07XG5cbiAgICAgICAgLy8gLy8gVXBkYXRlIHRoZSBlZmZlY3QgcGFyYW1ldGVycyBmcm9tIHRoZSBERVJJVkVEIGNsYXNzLlxuICAgICAgICAvLyB0aGlzLnVwZGF0ZVBhcmFtcyhpbmRleCwgZWZmZWN0UHJvcHMucHJvcEJ1ZmZlciEpO1xuXG4gICAgICAgIC8vIGlmIChFRElUT1JfTk9UX0lOX1BSRVZJRVcpIHtcbiAgICAgICAgLy8gICAgIC8vIEluIEVkaXRvciBtb2RlLCB1cGxvYWQgdGhlIGRhdGEgZGlyZWN0bHkuXG4gICAgICAgIC8vICAgICBlZmZlY3RQcm9wcy5wcm9wVGV4dHVyZSEudXBsb2FkRGF0YShlZmZlY3RQcm9wcy5wcm9wQnVmZmVyISk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gZWxzZSB7XG4gICAgICAgIC8vICAgICAvLyBJbiBQcmV2aWV3IG1vZGUsIHdhaXQgZm9yIHRoZSBsYXRlVXBkYXRlIHRvIHVwbG9hZCB0aGUgZGF0YS5cbiAgICAgICAgLy8gICAgIGVmZmVjdFByb3BzLmlzRGlydHkgPSB0cnVlO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5q+PMjU25YCL54K65LiA57WEXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldCBpbnN0YW5jZUdyb3VwSWR4KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMuX2luc3RhbmNlSUQgLyAyNTYpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRCdWZmZXJJbmRleCgpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLl9pbnN0YW5jZUlEIC0gKHRoaXMuaW5zdGFuY2VHcm91cElkeCAqIDI1Nik7XG4gICAgICAgIHJldHVybiBvZmZzZXQgKiAodGhpcy5waXhlbHNVc2FnZSAqIDQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWPluW+lyBTcHJpdGUg55qEIFVWIOacgOWwj+OAgeacgOWkp+WAvOWPiuWvrOmrmFxuICAgICAqIEBwYXJhbSB1diBcbiAgICAgKiBAcmV0dXJucyB2ZWM0IChtaW5VLCBtaW5WLCB3aWR0aCwgaGVpZ2h0KVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRVVih1djogbnVtYmVyW10pOiBWZWM0IHtcbiAgICAgICAgbGV0IG1pblUgPSBNYXRoLm1pbih1dlswXSwgdXZbMl0sIHV2WzRdLCB1dls2XSk7XG4gICAgICAgIGxldCBtaW5WID0gTWF0aC5taW4odXZbMV0sIHV2WzNdLCB1dls1XSwgdXZbN10pO1xuXG4gICAgICAgIGxldCBtYXhVID0gTWF0aC5tYXgodXZbMF0sIHV2WzJdLCB1dls0XSwgdXZbNl0pO1xuICAgICAgICBsZXQgbWF4ViA9IE1hdGgubWF4KHV2WzFdLCB1dlszXSwgdXZbNV0sIHV2WzddKTtcblxuICAgICAgICBsZXQgd2lkdGggPSBtYXhVIC0gbWluVTtcbiAgICAgICAgbGV0IGhlaWdodCA9IG1heFYgLSBtaW5WO1xuXG4gICAgICAgIHJldHVybiBuZXcgVmVjNChtaW5VLCBtaW5WLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgLy8jZW5kcmVnaW9uXG5cblxuICAgIC8vI3JlZ2lvbiBsaWZlIGN5Y2xlXG4gICAgb25Mb2FkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmluaXQodGhpcy5waXhlbHNVc2FnZSk7XG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMucmVmbGFzaFBhcmFtcygpO1xuICAgIH1cblxuICAgIG9uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdW5pb25LZXkgPSB0aGlzLmdldEVmZmVjdFVuaW9uS2V5KCk7XG4gICAgICAgIGNvbnN0IGVmZmVjdERhdGEgPSBTcHJpdGVFZmZlY3RCYXNlLl9zX2VmZmVjdE1hcC5nZXQodW5pb25LZXkpITtcbiAgICAgICAgY29uc3QgaWR4ID0gZWZmZWN0RGF0YS51dWlkcy5maW5kSW5kZXgoKHYpID0+IHYgPT09IHRoaXMubm9kZS51dWlkKTtcblxuICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgICAgZXJyb3IoXCJFZmZlY3QgaW5kZXggaXMgbm90IGZvdW5kIVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlSUQgPSAtMTtcbiAgICAgICAgICAgIGVmZmVjdERhdGEhLnV1aWRzW2lkeF0gPSBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgKFNwcml0ZUVmZmVjdEJhc2UuX3NfZWZmZWN0TWFwLmhhcyh1bmlvbktleSkpIHtcbiAgICAgICAgLy8gICAgIGNvbnN0IGluZGV4ID0gU3ByaXRlRWZmZWN0QmFzZS5fc19lZmZlY3RNYXAuZ2V0KHVuaW9uS2V5KSEuZmluZEluZGV4KCh2KSA9PiB2ID09PSB0aGlzLm5vZGUudXVpZCk7XG4gICAgICAgIC8vICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIC8vICAgICAgICAgZXJyb3IoXCJFZmZlY3QgaW5kZXggaXMgbm90IGZvdW5kIVwiKTtcbiAgICAgICAgLy8gICAgICAgICByZXR1cm47XG4gICAgICAgIC8vICAgICB9XG5cbiAgICAgICAgLy8gICAgIFNwcml0ZUVmZmVjdEJhc2UuX3NfZWZmZWN0TWFwLmdldCh1bmlvbktleSkhW2luZGV4XSA9IFwiXCI7XG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICBlcnJvcihgVGhlIGVmZmVjdCBtYXAgb2YgJHt1bmlvbktleX0gaXMgbm90IGZvdW5kIWApO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgbGF0ZVVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHVuaW9uS2V5ID0gdGhpcy5nZXRFZmZlY3RVbmlvbktleSgpO1xuICAgICAgICBjb25zdCBlZmZlY3REYXRhID0gU3ByaXRlRWZmZWN0QmFzZS5fc19lZmZlY3RNYXAuZ2V0KHVuaW9uS2V5KSE7XG5cbiAgICAgICAgY29uc3QgaWR4ID0gTWF0aC5mbG9vcih0aGlzLl9pbnN0YW5jZUlEIC8gMjU2KTtcbiAgICAgICAgY29uc3QgZWZmZWN0UHJvcHMgPSBlZmZlY3REYXRhLmRhdGFbaWR4XTtcblxuICAgICAgICBpZiAoZWZmZWN0UHJvcHMuaXNEaXJ0eSkge1xuICAgICAgICAgICAgZWZmZWN0UHJvcHMucHJvcFRleHR1cmUhLnVwbG9hZERhdGEoZWZmZWN0UHJvcHMucHJvcEJ1ZmZlciEpO1xuICAgICAgICAgICAgZWZmZWN0UHJvcHMuaXNEaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc3QgZWZmZWN0UHJvcHMgPSBTcHJpdGVFZmZlY3RCYXNlLl9zX2VmZmVjdFByb3BzLmdldCh1bmlvbktleSkhW3RoaXMuaW5zdGFuY2VHcm91cElkeF07XG4gICAgICAgIC8vIGlmIChlZmZlY3RQcm9wcy5pc0RpcnR5KSB7XG4gICAgICAgIC8vICAgICAvLyBsb2coYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSdzIGVmZmVjdCBwcm9wcyBpcyBESVJUWSFgKTtcbiAgICAgICAgLy8gICAgIGVmZmVjdFByb3BzLnByb3BUZXh0dXJlIS51cGxvYWREYXRhKGVmZmVjdFByb3BzLnByb3BCdWZmZXIhKTtcbiAgICAgICAgLy8gICAgIGVmZmVjdFByb3BzLmlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgLy8gfVxuICAgIH1cbn0iXX0=