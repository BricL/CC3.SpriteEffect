"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SpriteEffectBase_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpriteEffectBase = void 0;
const cc_1 = require("cc");
const env_1 = require("cc/env");
const { ccclass, property } = cc_1._decorator;
const PROP_TEXTURE_SIZE = 128;
let SpriteEffectBase = SpriteEffectBase_1 = class SpriteEffectBase extends cc_1.Sprite {
    constructor() {
        super(...arguments);
        this.effectAsset = null;
        this._instanceID = -1;
        this._effectColor = new cc_1.Color(255, 255, 255, 255);
        this._is2Din3D = false;
        this._sampleFromRT = false;
    }
    //#region effectColor
    set effectColor(val) {
        this._effectColor = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this.reflashParams();
        }
    }
    get effectColor() {
        return this._effectColor;
    }
    //#endregion
    //#region is2Din3D
    set is2Din3D(val) {
        this._is2Din3D = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.init(this.pixelsUsage);
            this.reflashParams();
        }
        else {
            this.init(this.pixelsUsage);
            this.reflashParams();
        }
    }
    get is2Din3D() {
        return this._is2Din3D;
    }
    //#endregion
    //#region sampleFromRT
    set sampleFromRT(val) {
        this._sampleFromRT = val;
        // this.resetMaterial({
        //     defines: {
        //         SAMPLE_FROM_RT: this._sampleFromRT,
        //     }
        // });
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.init(this.pixelsUsage);
            this.reflashParams();
        }
        else {
            this.init(this.pixelsUsage);
            this.reflashParams();
        }
    }
    get sampleFromRT() {
        return this._sampleFromRT;
    }
    /**
     * @abstract
     * Reset the material.
     * @returns void
     */
    resetMaterial(matInfo) {
        if (this.customMaterial) {
            this.customMaterial.copy(this.customMaterial, matInfo);
        }
    }
    //#endregion
    //#region methods
    /**
     * 4個float為一個pixel，需使用幾個pixel數量
     */
    get pixelsUsage() {
        return Math.pow(2, Math.ceil(Math.log(this.floatUsage) / Math.log(2))) / 4;
    }
    calBufferIndex(x, y, w) {
        return (x + (y * w)) * 4;
    }
    init(pixelsUsage) {
        const unionKey = this.getEffectUnionKey();
        // Step1: 取的當前的effectIndex
        if (!SpriteEffectBase_1._s_effectMap.has(unionKey)) {
            cc_1.log(`init: ${unionKey} not found, create new one`);
            let effectData = {
                data: [],
                uuids: []
            };
            effectData.data.push({
                mat: null,
                propBuffer: null,
                propTexture: null,
                isDirty: false,
            });
            SpriteEffectBase_1._s_effectMap.set(unionKey, effectData);
        }
        const effectData = SpriteEffectBase_1._s_effectMap.get(unionKey);
        this._instanceID = effectData.uuids.findIndex((v) => v === this.node.uuid);
        if (this._instanceID === -1) {
            this._instanceID = effectData.uuids.findIndex((v) => v === "");
            if (this._instanceID === -1) {
                this._instanceID = effectData.uuids.push(this.node.uuid) - 1;
                if (effectData.data.length < Math.floor(this._instanceID / PROP_TEXTURE_SIZE) + 1) {
                    effectData.data.push({
                        mat: null,
                        propBuffer: null,
                        propTexture: null,
                        isDirty: false,
                    });
                }
            }
            else {
                effectData.uuids[this._instanceID] = this.node.uuid;
            }
        }
        const idx = Math.floor(this._instanceID / PROP_TEXTURE_SIZE);
        this.color = new cc_1.Color(this._instanceID % PROP_TEXTURE_SIZE, pixelsUsage, PROP_TEXTURE_SIZE, 255);
        // Step2: 初始化Effect props
        if (effectData.data[idx].mat === null) {
            const w = PROP_TEXTURE_SIZE;
            const h = pixelsUsage;
            let propBuffer = new Float32Array(w * h * 4);
            for (let y = 0; y < h; y++) {
                for (let x = 0; x < w; x++) {
                    const index = (x + (y * w)) * 4;
                    propBuffer[index] = 1;
                    propBuffer[index + 1] = 0;
                    propBuffer[index + 2] = 1;
                    propBuffer[index + 3] = 1;
                }
            }
            let propsTexture = new cc_1.Texture2D();
            propsTexture.setFilters(cc_1.Texture2D.Filter.NEAREST, cc_1.Texture2D.Filter.NEAREST);
            propsTexture.reset({
                width: w,
                height: h,
                format: cc_1.Texture2D.PixelFormat.RGBA32F,
                mipmapLevel: 0
            });
            propsTexture.uploadData(propBuffer);
            let mat = this.initMaterial();
            mat.setProperty('propsTexture', propsTexture);
            effectData.data[idx] = {
                mat: mat,
                propBuffer: propBuffer,
                propTexture: propsTexture,
                isDirty: false
            };
        }
        this.customMaterial = effectData.data[idx].mat;
    }
    reflashParams() {
        const unionKey = this.getEffectUnionKey();
        if (SpriteEffectBase_1._s_effectMap.has(unionKey) === false) {
            cc_1.error(`${this.constructor.name}: effect data not found!`);
            return;
        }
        const idx = Math.floor(this._instanceID / PROP_TEXTURE_SIZE);
        const effectProps = SpriteEffectBase_1._s_effectMap.get(unionKey).data[idx];
        // Update the effect parameters from the DERIVED class.
        this.updateParams(this._instanceID % PROP_TEXTURE_SIZE, PROP_TEXTURE_SIZE - 1, effectProps.propBuffer);
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            // In Editor mode, upload the data directly.
            effectProps.propTexture.uploadData(effectProps.propBuffer);
        }
        else {
            // In Preview mode, wait for the lateUpdate to upload the data.
            effectProps.isDirty = true;
        }
    }
    /**
     * 取得 Sprite 的 UV 最小、最大值及寬高
     * @param uv
     * @returns vec4 (minU, minV, width, height)
     */
    getUV(uv) {
        let minU = Math.min(uv[0], uv[2], uv[4], uv[6]);
        let minV = Math.min(uv[1], uv[3], uv[5], uv[7]);
        let maxU = Math.max(uv[0], uv[2], uv[4], uv[6]);
        let maxV = Math.max(uv[1], uv[3], uv[5], uv[7]);
        let width = maxU - minU;
        let height = maxV - minV;
        return new cc_1.Vec4(minU, minV, width, height);
    }
    //#endregion
    //#region life cycle
    onLoad() {
        super.onLoad();
        this.init(this.pixelsUsage);
    }
    start() {
        this.reflashParams();
    }
    onDestroy() {
        const unionKey = this.getEffectUnionKey();
        if (SpriteEffectBase_1._s_effectMap.has(unionKey) === false) {
            cc_1.error(`${this.constructor.name}: effect data not found!`);
            return;
        }
        const effectData = SpriteEffectBase_1._s_effectMap.get(unionKey);
        const idx = effectData.uuids.findIndex((v) => v === this.node.uuid);
        if (idx === -1) {
            cc_1.error("Effect index is not found!");
        }
        else {
            this._instanceID = -1;
            effectData.uuids[idx] = "";
        }
    }
    lateUpdate(dt) {
        const unionKey = this.getEffectUnionKey();
        if (SpriteEffectBase_1._s_effectMap.has(unionKey) === false) {
            cc_1.error(`${this.constructor.name}: effect data not found!`);
            return;
        }
        const effectData = SpriteEffectBase_1._s_effectMap.get(unionKey);
        const idx = Math.floor(this._instanceID / PROP_TEXTURE_SIZE);
        const effectProps = effectData.data[idx];
        if (effectProps.isDirty) {
            effectProps.propTexture.uploadData(effectProps.propBuffer);
            effectProps.isDirty = false;
        }
    }
};
SpriteEffectBase._s_effectMap = new Map();
__decorate([
    property({ type: cc_1.EffectAsset, tooltip: '指定效果EffectAsset' })
], SpriteEffectBase.prototype, "effectAsset", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_1.Color, tooltip: "My Color" })
], SpriteEffectBase.prototype, "effectColor", null);
__decorate([
    property
], SpriteEffectBase.prototype, "_effectColor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: '當使用RenderRoot2D時使用' })
], SpriteEffectBase.prototype, "is2Din3D", null);
__decorate([
    property
], SpriteEffectBase.prototype, "_is2Din3D", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: '當Sprite來源RenderTexture時使用' })
], SpriteEffectBase.prototype, "sampleFromRT", null);
__decorate([
    property
], SpriteEffectBase.prototype, "_sampleFromRT", void 0);
SpriteEffectBase = SpriteEffectBase_1 = __decorate([
    ccclass('SpriteEffectBase')
], SpriteEffectBase);
exports.SpriteEffectBase = SpriteEffectBase;
//# sourceMappingURL=data:application/json;base64,