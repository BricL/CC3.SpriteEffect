"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.methods = exports.unload = exports.load = void 0;
const cc_1 = require("cc");
const util_1 = require("../util");
const classIdMap = {
    ["SpriteEffectColor"]: 'c6496Bv0dxAApSoUg42h5Lz',
    ["SpriteEffectColorizing"]: '20603zBoKFLN4Q5V6kEd9S7',
    ["SpriteEffectDisappear"]: '4c31erKjO1IOorl9cBmHuBS',
    ["SpriteEffectDissolve"]: '18a89aWE/xKVqkaiGTOi3+S',
    ["SpriteEffectDistort"]: 'c3398hqo91I14qg5Yx9QMZ0',
    ["SpriteEffectFlowLight"]: 'fad028dNo1AO7/Ha84/lbRO',
    ["SpriteEffectGaussianBlur"]: 'b4cd9DMOSZDZJNBTtka9K8l',
    ["SpriteEffectShadow"]: '6acadLrR85GG5gtfeWP+eMN',
    ["SpriteEffectTest"]: '0c212nm0DhIKqodQ9hpgPQf',
    ["SpriteEffectWaterFlow"]: '76000uzo1VDjKouHxxGxirw',
    ["SpriteEffectWaterRipple"]: '4cb70X8jgtA6YJR2wD9bTyI',
    ["SpriteEffectWaterWave"]: 'e7c2fH4W0BPXKTIAIKn2ff5',
};
function load() {
}
exports.load = load;
function unload() {
}
exports.unload = unload;
exports.methods = {
    async addEffect(nameOfEffect) {
        console.log(`Adding effect: ${nameOfEffect}`);
        let canvasNode = null;
        const rootNode = cc_1.director.getScene();
        for (const childNode of rootNode.children) {
            if (childNode.getComponent(cc_1.Canvas)) {
                canvasNode = childNode;
                break;
            }
        }
        if (!canvasNode) {
            canvasNode = new cc_1.Node();
            canvasNode.setParent(rootNode);
            canvasNode.name = 'Canvas';
            canvasNode.layer = cc_1.Layers.Enum.UI_2D;
            let canvasComp = canvasNode.addComponent(cc_1.Canvas);
            let camNode = new cc_1.Node();
            camNode.setParent(canvasNode);
            camNode.name = 'Camera';
            camNode.layer = cc_1.Layers.Enum.UI_2D;
            let camComp = camNode.addComponent(cc_1.Camera);
            camComp.priority = 65535;
            camComp.visibility = cc_1.Layers.Enum.UI_2D | cc_1.Layers.Enum.UI_3D;
            camComp.projection = cc_1.Camera.ProjectionType.ORTHO;
            canvasComp.cameraComponent = camComp;
        }
        let nameOfCount = 0;
        for (const childNode of canvasNode.children) {
            if (childNode.name.includes(nameOfEffect)) {
                nameOfCount++;
            }
        }
        let node = new cc_1.Node();
        node.setParent(canvasNode);
        node.name = nameOfCount === 0 ? nameOfEffect : `${nameOfEffect}-${nameOfCount.toString().padStart(3, '0')}`;
        node.layer = cc_1.Layers.Enum.UI_2D;
        let classID = classIdMap[nameOfEffect] || '';
        if (classID !== '') {
            await Editor.Message.request('scene', 'create-component', {
                uuid: node.uuid,
                component: classID
            });
            const res = await util_1.assignEffectAsset(nameOfEffect, node.uuid);
            if (res) {
                util_1.reimportAsset();
                console.log(`Effect自動掛載成功`);
            }
            else {
                console.log(`Effect自動掛載失敗`);
            }
        }
        else {
            console.error('No class ID found for effect: ' + nameOfEffect);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NlbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zb3VyY2UvY29udHJpYnV0aW9ucy9zY2VuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFBa0U7QUFDbEUsa0NBQTJEO0FBRTNELE1BQU0sVUFBVSxHQUE4QjtJQUMxQyxDQUFDLG1CQUFtQixDQUFDLEVBQUUseUJBQXlCO0lBQ2hELENBQUMsd0JBQXdCLENBQUMsRUFBRSx5QkFBeUI7SUFDckQsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLHlCQUF5QjtJQUNwRCxDQUFDLHNCQUFzQixDQUFDLEVBQUUseUJBQXlCO0lBQ25ELENBQUMscUJBQXFCLENBQUMsRUFBRSx5QkFBeUI7SUFDbEQsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLHlCQUF5QjtJQUNwRCxDQUFDLDBCQUEwQixDQUFDLEVBQUUseUJBQXlCO0lBQ3ZELENBQUMsb0JBQW9CLENBQUMsRUFBRSx5QkFBeUI7SUFDakQsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLHlCQUF5QjtJQUMvQyxDQUFDLHVCQUF1QixDQUFDLEVBQUUseUJBQXlCO0lBQ3BELENBQUMseUJBQXlCLENBQUMsRUFBRSx5QkFBeUI7SUFDdEQsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLHlCQUF5QjtDQUN2RCxDQUFBO0FBRUQsU0FBZ0IsSUFBSTtBQUVwQixDQUFDO0FBRkQsb0JBRUM7QUFFRCxTQUFnQixNQUFNO0FBRXRCLENBQUM7QUFGRCx3QkFFQztBQUVZLFFBQUEsT0FBTyxHQUFHO0lBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsWUFBb0I7UUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUU5QyxJQUFJLFVBQVUsR0FBZ0IsSUFBSSxDQUFDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLGFBQVEsQ0FBQyxRQUFRLEVBQVUsQ0FBQztRQUU3QyxLQUFLLE1BQU0sU0FBUyxJQUFJLFFBQVEsQ0FBQyxRQUFR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ImltcG9ydCB7IENhbWVyYSwgQ2FudmFzLCBkaXJlY3RvciwgZmluZCwgTGF5ZXJzLCBOb2RlIH0gZnJvbSBcImNjXCI7XG5pbXBvcnQgeyBhc3NpZ25FZmZlY3RBc3NldCwgcmVpbXBvcnRBc3NldCB9IGZyb20gXCIuLi91dGlsXCI7XG5cbmNvbnN0IGNsYXNzSWRNYXA6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgW1wiU3ByaXRlRWZmZWN0Q29sb3JcIl06ICdjNjQ5NkJ2MGR4QUFwU29VZzQyaDVMeicsXG4gICAgW1wiU3ByaXRlRWZmZWN0Q29sb3JpemluZ1wiXTogJzIwNjAzekJvS0ZMTjRRNVY2a0VkOVM3JyxcbiAgICBbXCJTcHJpdGVFZmZlY3REaXNhcHBlYXJcIl06ICc0YzMxZXJLak8xSU9vcmw5Y0JtSHVCUycsXG4gICAgW1wiU3ByaXRlRWZmZWN0RGlzc29sdmVcIl06ICcxOGE4OWFXRS94S1Zxa2FpR1RPaTMrUycsXG4gICAgW1wiU3ByaXRlRWZmZWN0RGlzdG9ydFwiXTogJ2MzMzk4aHFvOTFJMTRxZzVZeDlRTVowJyxcbiAgICBbXCJTcHJpdGVFZmZlY3RGbG93TGlnaHRcIl06ICdmYWQwMjhkTm8xQU83L0hhODQvbGJSTycsXG4gICAgW1wiU3ByaXRlRWZmZWN0R2F1c3NpYW5CbHVyXCJdOiAnYjRjZDlETU9TWkRaSk5CVHRrYTlLOGwnLFxuICAgIFtcIlNwcml0ZUVmZmVjdFNoYWRvd1wiXTogJzZhY2FkTHJSODVHRzVndGZlV1ArZU1OJyxcbiAgICBbXCJTcHJpdGVFZmZlY3RUZXN0XCJdOiAnMGMyMTJubTBEaElLcW9kUTlocGdQUWYnLFxuICAgIFtcIlNwcml0ZUVmZmVjdFdhdGVyRmxvd1wiXTogJzc2MDAwdXpvMVZEaktvdUh4eEd4aXJ3JyxcbiAgICBbXCJTcHJpdGVFZmZlY3RXYXRlclJpcHBsZVwiXTogJzRjYjcwWDhqZ3RBNllKUjJ3RDliVHlJJyxcbiAgICBbXCJTcHJpdGVFZmZlY3RXYXRlcldhdmVcIl06ICdlN2MyZkg0VzBCUFhLVElBSUtuMmZmNScsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkKCkge1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bmxvYWQoKSB7XG5cbn1cblxuZXhwb3J0IGNvbnN0IG1ldGhvZHMgPSB7XG4gICAgYXN5bmMgYWRkRWZmZWN0KG5hbWVPZkVmZmVjdDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBBZGRpbmcgZWZmZWN0OiAke25hbWVPZkVmZmVjdH1gKTtcblxuICAgICAgICBsZXQgY2FudmFzTm9kZTogTm9kZSB8IG51bGwgPSBudWxsO1xuICAgICAgICBjb25zdCByb290Tm9kZSA9IGRpcmVjdG9yLmdldFNjZW5lKCkgYXMgTm9kZTtcblxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkTm9kZSBvZiByb290Tm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZS5nZXRDb21wb25lbnQoQ2FudmFzKSkge1xuICAgICAgICAgICAgICAgIGNhbnZhc05vZGUgPSBjaGlsZE5vZGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNhbnZhc05vZGUpIHtcbiAgICAgICAgICAgIGNhbnZhc05vZGUgPSBuZXcgTm9kZSgpO1xuICAgICAgICAgICAgY2FudmFzTm9kZS5zZXRQYXJlbnQocm9vdE5vZGUpO1xuICAgICAgICAgICAgY2FudmFzTm9kZS5uYW1lID0gJ0NhbnZhcyc7XG4gICAgICAgICAgICBjYW52YXNOb2RlLmxheWVyID0gTGF5ZXJzLkVudW0uVUlfMkQ7XG4gICAgICAgICAgICBsZXQgY2FudmFzQ29tcCA9IGNhbnZhc05vZGUuYWRkQ29tcG9uZW50KENhbnZhcyk7XG5cbiAgICAgICAgICAgIGxldCBjYW1Ob2RlID0gbmV3IE5vZGUoKTtcbiAgICAgICAgICAgIGNhbU5vZGUuc2V0UGFyZW50KGNhbnZhc05vZGUpO1xuICAgICAgICAgICAgY2FtTm9kZS5uYW1lID0gJ0NhbWVyYSc7XG4gICAgICAgICAgICBjYW1Ob2RlLmxheWVyID0gTGF5ZXJzLkVudW0uVUlfMkQ7XG4gICAgICAgICAgICBsZXQgY2FtQ29tcCA9IGNhbU5vZGUuYWRkQ29tcG9uZW50KENhbWVyYSk7XG4gICAgICAgICAgICBjYW1Db21wLnByaW9yaXR5ID0gNjU1MzU7XG4gICAgICAgICAgICBjYW1Db21wLnZpc2liaWxpdHkgPSBMYXllcnMuRW51bS5VSV8yRCB8IExheWVycy5FbnVtLlVJXzNEO1xuICAgICAgICAgICAgY2FtQ29tcC5wcm9qZWN0aW9uID0gQ2FtZXJhLlByb2plY3Rpb25UeXBlLk9SVEhPO1xuXG4gICAgICAgICAgICBjYW52YXNDb21wLmNhbWVyYUNvbXBvbmVudCA9IGNhbUNvbXA7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbmFtZU9mQ291bnQgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkTm9kZSBvZiBjYW52YXNOb2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGROb2RlLm5hbWUuaW5jbHVkZXMobmFtZU9mRWZmZWN0KSkge1xuICAgICAgICAgICAgICAgIG5hbWVPZkNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbm9kZSA9IG5ldyBOb2RlKCk7XG4gICAgICAgIG5vZGUuc2V0UGFyZW50KGNhbnZhc05vZGUpO1xuICAgICAgICBub2RlLm5hbWUgPSBuYW1lT2ZDb3VudCA9PT0gMCA/IG5hbWVPZkVmZmVjdCA6IGAke25hbWVPZkVmZmVjdH0tJHtuYW1lT2ZDb3VudC50b1N0cmluZygpLnBhZFN0YXJ0KDMsICcwJyl9YDtcbiAgICAgICAgbm9kZS5sYXllciA9IExheWVycy5FbnVtLlVJXzJEO1xuXG4gICAgICAgIGxldCBjbGFzc0lEID0gY2xhc3NJZE1hcFtuYW1lT2ZFZmZlY3RdIHx8ICcnO1xuICAgICAgICBpZiAoY2xhc3NJRCAhPT0gJycpIHtcbiAgICAgICAgICAgIGF3YWl0IEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ3NjZW5lJywgJ2NyZWF0ZS1jb21wb25lbnQnLCB7XG4gICAgICAgICAgICAgICAgdXVpZDogbm9kZS51dWlkLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogY2xhc3NJRFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFzc2lnbkVmZmVjdEFzc2V0KG5hbWVPZkVmZmVjdCwgbm9kZS51dWlkKTtcbiAgICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgICAgICByZWltcG9ydEFzc2V0KCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEVmZmVjdOiHquWLleaOm+i8ieaIkOWKn2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEVmZmVjdOiHquWLleaOm+i8ieWkseaVl2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm8gY2xhc3MgSUQgZm91bmQgZm9yIGVmZmVjdDogJyArIG5hbWVPZkVmZmVjdCk7XG4gICAgICAgIH1cbiAgICB9XG59Il19