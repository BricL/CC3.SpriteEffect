"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.methods = exports.unload = exports.load = void 0;
const cc_1 = require("cc");
const util_1 = require("../util");
const classIdMap = {
    ["SpriteEffectColor"]: 'c6496Bv0dxAApSoUg42h5Lz',
    ["SpriteEffectColorizing"]: '20603zBoKFLN4Q5V6kEd9S7',
    ["SpriteEffectTransition"]: '6f463dQDhFIn5aLdZNtGpuS',
    ["SpriteEffectDissolve"]: '18a89aWE/xKVqkaiGTOi3+S',
    ["SpriteEffectDistort"]: 'c3398hqo91I14qg5Yx9QMZ0',
    ["SpriteEffectFlowLight"]: 'fad028dNo1AO7/Ha84/lbRO',
    ["SpriteEffectGaussianBlur"]: 'b4cd9DMOSZDZJNBTtka9K8l',
    ["SpriteEffectShadow"]: '6acadLrR85GG5gtfeWP+eMN',
    ["SpriteEffectTest"]: '0c212nm0DhIKqodQ9hpgPQf',
    ["SpriteEffectWaterFlow"]: '76000uzo1VDjKouHxxGxirw',
    ["SpriteEffectWaterRipple"]: '4cb70X8jgtA6YJR2wD9bTyI',
    ["SpriteEffectWaterWave"]: 'e7c2fH4W0BPXKTIAIKn2ff5',
};
function load() {
}
exports.load = load;
function unload() {
}
exports.unload = unload;
exports.methods = {
    async addEffect(nameOfEffect) {
        console.log(`Adding effect: ${nameOfEffect}`);
        let canvasNode = null;
        const rootNode = cc_1.director.getScene();
        for (const childNode of rootNode.children) {
            if (childNode.getComponent(cc_1.Canvas)) {
                canvasNode = childNode;
                break;
            }
        }
        if (!canvasNode) {
            canvasNode = new cc_1.Node();
            canvasNode.setParent(rootNode);
            canvasNode.name = 'Canvas';
            canvasNode.layer = cc_1.Layers.Enum.UI_2D;
            let canvasComp = canvasNode.addComponent(cc_1.Canvas);
            let camNode = new cc_1.Node();
            camNode.setParent(canvasNode);
            camNode.name = 'Camera';
            camNode.layer = cc_1.Layers.Enum.UI_2D;
            let camComp = camNode.addComponent(cc_1.Camera);
            camComp.priority = 65535;
            camComp.visibility = cc_1.Layers.Enum.UI_2D | cc_1.Layers.Enum.UI_3D;
            camComp.projection = cc_1.Camera.ProjectionType.ORTHO;
            canvasComp.cameraComponent = camComp;
        }
        let nameOfCount = 0;
        for (const childNode of canvasNode.children) {
            if (childNode.name.includes(nameOfEffect)) {
                nameOfCount++;
            }
        }
        let node = new cc_1.Node();
        node.setParent(canvasNode);
        node.name = nameOfCount === 0 ? nameOfEffect : `${nameOfEffect}-${nameOfCount.toString().padStart(3, '0')}`;
        node.layer = cc_1.Layers.Enum.UI_2D;
        let classID = classIdMap[nameOfEffect] || '';
        if (classID !== '') {
            await Editor.Message.request('scene', 'create-component', {
                uuid: node.uuid,
                component: classID
            });
            const res = await util_1.assignEffectAsset(nameOfEffect, node.uuid);
            if (res) {
                util_1.reimportAsset();
                console.log(`Effect自動掛載成功`);
            }
            else {
                console.log(`Effect自動掛載失敗`);
            }
        }
        else {
            console.error('No class ID found for effect: ' + nameOfEffect);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NlbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zb3VyY2UvY29udHJpYnV0aW9ucy9zY2VuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFBa0U7QUFDbEUsa0NBQTJEO0FBRTNELE1BQU0sVUFBVSxHQUE4QjtJQUMxQyxDQUFDLG1CQUFtQixDQUFDLEVBQUUseUJBQXlCO0lBQ2hELENBQUMsd0JBQXdCLENBQUMsRUFBRSx5QkFBeUI7SUFDckQsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLHlCQUF5QjtJQUNyRCxDQUFDLHNCQUFzQixDQUFDLEVBQUUseUJBQXlCO0lBQ25ELENBQUMscUJBQXFCLENBQUMsRUFBRSx5QkFBeUI7SUFDbEQsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLHlCQUF5QjtJQUNwRCxDQUFDLDBCQUEwQixDQUFDLEVBQUUseUJBQXlCO0lBQ3ZELENBQUMsb0JBQW9CLENBQUMsRUFBRSx5QkFBeUI7SUFDakQsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLHlCQUF5QjtJQUMvQyxDQUFDLHVCQUF1QixDQUFDLEVBQUUseUJBQXlCO0lBQ3BELENBQUMseUJBQXlCLENBQUMsRUFBRSx5QkFBeUI7SUFDdEQsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLHlCQUF5QjtDQUN2RCxDQUFBO0FBRUQsU0FBZ0IsSUFBSTtBQUVwQixDQUFDO0FBRkQsb0JBRUM7QUFFRCxTQUFnQixNQUFNO0FBRXRCLENBQUM7QUFGRCx3QkFFQztBQUVZLFFBQUEsT0FBTyxHQUFHO0lBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsWUFBb0I7UUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUU5QyxJQUFJLFVBQVUsR0FBZ0IsSUFBSSxDQUFDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLGFBQVEsQ0FBQyxRQUFRLEVBQVUsQ0FBQztRQUU3QyxLQUFLLE1BQU0sU0FBUyxJQUFJLFFBQVEsQ0FBQyxRQUFR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ImltcG9ydCB7IENhbWVyYSwgQ2FudmFzLCBkaXJlY3RvciwgZmluZCwgTGF5ZXJzLCBOb2RlIH0gZnJvbSBcImNjXCI7XG5pbXBvcnQgeyBhc3NpZ25FZmZlY3RBc3NldCwgcmVpbXBvcnRBc3NldCB9IGZyb20gXCIuLi91dGlsXCI7XG5cbmNvbnN0IGNsYXNzSWRNYXA6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgW1wiU3ByaXRlRWZmZWN0Q29sb3JcIl06ICdjNjQ5NkJ2MGR4QUFwU29VZzQyaDVMeicsXG4gICAgW1wiU3ByaXRlRWZmZWN0Q29sb3JpemluZ1wiXTogJzIwNjAzekJvS0ZMTjRRNVY2a0VkOVM3JyxcbiAgICBbXCJTcHJpdGVFZmZlY3RUcmFuc2l0aW9uXCJdOiAnNmY0NjNkUURoRkluNWFMZFpOdEdwdVMnLFxuICAgIFtcIlNwcml0ZUVmZmVjdERpc3NvbHZlXCJdOiAnMThhODlhV0UveEtWcWthaUdUT2kzK1MnLFxuICAgIFtcIlNwcml0ZUVmZmVjdERpc3RvcnRcIl06ICdjMzM5OGhxbzkxSTE0cWc1WXg5UU1aMCcsXG4gICAgW1wiU3ByaXRlRWZmZWN0Rmxvd0xpZ2h0XCJdOiAnZmFkMDI4ZE5vMUFPNy9IYTg0L2xiUk8nLFxuICAgIFtcIlNwcml0ZUVmZmVjdEdhdXNzaWFuQmx1clwiXTogJ2I0Y2Q5RE1PU1pEWkpOQlR0a2E5SzhsJyxcbiAgICBbXCJTcHJpdGVFZmZlY3RTaGFkb3dcIl06ICc2YWNhZExyUjg1R0c1Z3RmZVdQK2VNTicsXG4gICAgW1wiU3ByaXRlRWZmZWN0VGVzdFwiXTogJzBjMjEybm0wRGhJS3FvZFE5aHBnUFFmJyxcbiAgICBbXCJTcHJpdGVFZmZlY3RXYXRlckZsb3dcIl06ICc3NjAwMHV6bzFWRGpLb3VIeHhHeGlydycsXG4gICAgW1wiU3ByaXRlRWZmZWN0V2F0ZXJSaXBwbGVcIl06ICc0Y2I3MFg4amd0QTZZSlIyd0Q5YlR5SScsXG4gICAgW1wiU3ByaXRlRWZmZWN0V2F0ZXJXYXZlXCJdOiAnZTdjMmZINFcwQlBYS1RJQUlLbjJmZjUnLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZCgpIHtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5sb2FkKCkge1xuXG59XG5cbmV4cG9ydCBjb25zdCBtZXRob2RzID0ge1xuICAgIGFzeW5jIGFkZEVmZmVjdChuYW1lT2ZFZmZlY3Q6IHN0cmluZykge1xuICAgICAgICBjb25zb2xlLmxvZyhgQWRkaW5nIGVmZmVjdDogJHtuYW1lT2ZFZmZlY3R9YCk7XG5cbiAgICAgICAgbGV0IGNhbnZhc05vZGU6IE5vZGUgfCBudWxsID0gbnVsbDtcbiAgICAgICAgY29uc3Qgcm9vdE5vZGUgPSBkaXJlY3Rvci5nZXRTY2VuZSgpIGFzIE5vZGU7XG5cbiAgICAgICAgZm9yIChjb25zdCBjaGlsZE5vZGUgb2Ygcm9vdE5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUuZ2V0Q29tcG9uZW50KENhbnZhcykpIHtcbiAgICAgICAgICAgICAgICBjYW52YXNOb2RlID0gY2hpbGROb2RlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjYW52YXNOb2RlKSB7XG4gICAgICAgICAgICBjYW52YXNOb2RlID0gbmV3IE5vZGUoKTtcbiAgICAgICAgICAgIGNhbnZhc05vZGUuc2V0UGFyZW50KHJvb3ROb2RlKTtcbiAgICAgICAgICAgIGNhbnZhc05vZGUubmFtZSA9ICdDYW52YXMnO1xuICAgICAgICAgICAgY2FudmFzTm9kZS5sYXllciA9IExheWVycy5FbnVtLlVJXzJEO1xuICAgICAgICAgICAgbGV0IGNhbnZhc0NvbXAgPSBjYW52YXNOb2RlLmFkZENvbXBvbmVudChDYW52YXMpO1xuXG4gICAgICAgICAgICBsZXQgY2FtTm9kZSA9IG5ldyBOb2RlKCk7XG4gICAgICAgICAgICBjYW1Ob2RlLnNldFBhcmVudChjYW52YXNOb2RlKTtcbiAgICAgICAgICAgIGNhbU5vZGUubmFtZSA9ICdDYW1lcmEnO1xuICAgICAgICAgICAgY2FtTm9kZS5sYXllciA9IExheWVycy5FbnVtLlVJXzJEO1xuICAgICAgICAgICAgbGV0IGNhbUNvbXAgPSBjYW1Ob2RlLmFkZENvbXBvbmVudChDYW1lcmEpO1xuICAgICAgICAgICAgY2FtQ29tcC5wcmlvcml0eSA9IDY1NTM1O1xuICAgICAgICAgICAgY2FtQ29tcC52aXNpYmlsaXR5ID0gTGF5ZXJzLkVudW0uVUlfMkQgfCBMYXllcnMuRW51bS5VSV8zRDtcbiAgICAgICAgICAgIGNhbUNvbXAucHJvamVjdGlvbiA9IENhbWVyYS5Qcm9qZWN0aW9uVHlwZS5PUlRITztcblxuICAgICAgICAgICAgY2FudmFzQ29tcC5jYW1lcmFDb21wb25lbnQgPSBjYW1Db21wO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5hbWVPZkNvdW50ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZE5vZGUgb2YgY2FudmFzTm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZS5uYW1lLmluY2x1ZGVzKG5hbWVPZkVmZmVjdCkpIHtcbiAgICAgICAgICAgICAgICBuYW1lT2ZDb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5vZGUgPSBuZXcgTm9kZSgpO1xuICAgICAgICBub2RlLnNldFBhcmVudChjYW52YXNOb2RlKTtcbiAgICAgICAgbm9kZS5uYW1lID0gbmFtZU9mQ291bnQgPT09IDAgPyBuYW1lT2ZFZmZlY3QgOiBgJHtuYW1lT2ZFZmZlY3R9LSR7bmFtZU9mQ291bnQudG9TdHJpbmcoKS5wYWRTdGFydCgzLCAnMCcpfWA7XG4gICAgICAgIG5vZGUubGF5ZXIgPSBMYXllcnMuRW51bS5VSV8yRDtcblxuICAgICAgICBsZXQgY2xhc3NJRCA9IGNsYXNzSWRNYXBbbmFtZU9mRWZmZWN0XSB8fCAnJztcbiAgICAgICAgaWYgKGNsYXNzSUQgIT09ICcnKSB7XG4gICAgICAgICAgICBhd2FpdCBFZGl0b3IuTWVzc2FnZS5yZXF1ZXN0KCdzY2VuZScsICdjcmVhdGUtY29tcG9uZW50Jywge1xuICAgICAgICAgICAgICAgIHV1aWQ6IG5vZGUudXVpZCxcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IGNsYXNzSURcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBhc3NpZ25FZmZlY3RBc3NldChuYW1lT2ZFZmZlY3QsIG5vZGUudXVpZCk7XG4gICAgICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICAgICAgcmVpbXBvcnRBc3NldCgpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFZmZlY3Toh6rli5XmjpvovInmiJDlip9gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFZmZlY3Toh6rli5XmjpvovInlpLHmlZdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIGNsYXNzIElEIGZvdW5kIGZvciBlZmZlY3Q6ICcgKyBuYW1lT2ZFZmZlY3QpO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==