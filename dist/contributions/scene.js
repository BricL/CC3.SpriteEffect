"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.methods = exports.unload = exports.load = void 0;
const cc_1 = require("cc");
function load() {
}
exports.load = load;
function unload() {
}
exports.unload = unload;
exports.methods = {
    addEffect(nameOfEffect) {
        console.log(`Adding effect: ${nameOfEffect}`);
        let canvasNode = null;
        const rootNode = cc_1.director.getScene();
        for (const childNode of rootNode.children) {
            if (childNode.getComponent(cc_1.Canvas)) {
                canvasNode = childNode;
                break;
            }
        }
        if (!canvasNode) {
            canvasNode = new cc_1.Node();
            canvasNode.setParent(rootNode);
            canvasNode.name = 'Canvas';
            canvasNode.layer = cc_1.Layers.Enum.UI_2D;
            let canvasComp = canvasNode.addComponent(cc_1.Canvas);
            let camNode = new cc_1.Node();
            camNode.setParent(canvasNode);
            camNode.name = 'Camera';
            camNode.layer = cc_1.Layers.Enum.UI_2D;
            let camComp = camNode.addComponent(cc_1.Camera);
            camComp.priority = 65535;
            camComp.visibility = cc_1.Layers.Enum.UI_2D | cc_1.Layers.Enum.UI_3D;
            camComp.projection = cc_1.Camera.ProjectionType.ORTHO;
            canvasComp.cameraComponent = camComp;
        }
        let nameOfCount = 0;
        for (const childNode of canvasNode.children) {
            if (childNode.name.includes(nameOfEffect)) {
                nameOfCount++;
            }
        }
        let node = new cc_1.Node();
        node.setParent(canvasNode);
        node.name = nameOfCount === 0 ? nameOfEffect : `${nameOfEffect}-${nameOfCount.toString().padStart(3, '0')}`;
        node.layer = cc_1.Layers.Enum.UI_2D;
        let classID = '';
        if (nameOfEffect === 'SpriteEffectColor') {
            classID = 'c6496Bv0dxAApSoUg42h5Lz';
        }
        if (classID !== '') {
            Editor.Message.request('scene', 'create-component', {
                uuid: node.uuid,
                component: classID
            });
        }
        else {
            console.error('No class ID found for effect: ' + nameOfEffect);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NlbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zb3VyY2UvY29udHJpYnV0aW9ucy9zY2VuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFBa0U7QUFFbEUsU0FBZ0IsSUFBSTtBQUVwQixDQUFDO0FBRkQsb0JBRUM7QUFFRCxTQUFnQixNQUFNO0FBRXRCLENBQUM7QUFGRCx3QkFFQztBQUVZLFFBQUEsT0FBTyxHQUFHO0lBQ25CLFNBQVMsQ0FBQyxZQUFvQjtRQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBRTlDLElBQUksVUFBVSxHQUFnQixJQUFJLENBQUM7UUFDbkMsTUFBTSxRQUFRLEdBQUcsYUFBUSxDQUFDLFFBQVEsRUFBVSxDQUFDO1FBRTdDLEtBQUssTUFBTSxTQUFTLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRTtZQUN2QyxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUMsV0FBTSxDQUFDLEVBQUU7Z0JBQ2hDLFVBQVUsR0FBRyxTQUFTLENBQUM7Z0JBQ3ZCLE1BQU07YUFDVDtTQUNKO1FBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLFVBQVUsR0FBRyxJQUFJLFNBQUksRUFBRSxDQUFDO1lBQ3hCLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDL0IsVUFBVSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7WUFDM0IsVUFBVSxDQUFDLEtBQUssR0FBRyxXQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNyQyxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLFdBQU0sQ0FBQyxDQUFDO1lBRWpELElBQUksT0FBTyxHQUFHLElBQUksU0FBSSxFQUFFLENBQUM7WUFDekIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM5QixPQUFPLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztZQUN4QixPQUFPLENBQUMsS0FBSyxHQUFHLFdBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2xDLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsV0FBTSxDQUFDLENBQUM7WUFDM0MsT0FBTyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDekIsT0FBTyxDQUFDLFVBQVUsR0FBRyxXQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMzRCxPQUFPLENBQUMsVUFBVSxHQUFHLFdBQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDO1lBRWpELFVBQVUsQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDO1NBQ3hDO1FBRUQsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLEtBQUssTUFBTSxTQUFTLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRTtZQUN6QyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUN2QyxXQUFXLEVBQUUsQ0FBQzthQUNqQjtTQUNKO1FBRUQsSUFBSSxJQUFJLEdBQUcsSUFBSSxTQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsV0FBVyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksSUFBSSxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQzVHLElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFL0IsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksWUFBWSxLQUFLLG1CQUFtQixFQUFFO1lBQ3RDLE9BQU8sR0FBRyx5QkFBeUIsQ0FBQztTQUN2QztRQUVELElBQUksT0FBTyxLQUFLLEVBQUUsRUFBRTtZQUNoQixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQ2hELElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixTQUFTLEVBQUUsT0FBTzthQUNyQixDQUFDLENBQUE7U0FDTDthQUNJO1lBQ0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsR0FBRyxZQUFZLENBQUMsQ0FBQztTQUNsRTtJQUNMLENBQUM7Q0FDSixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FtZXJhLCBDYW52YXMsIGRpcmVjdG9yLCBmaW5kLCBMYXllcnMsIE5vZGUgfSBmcm9tIFwiY2NcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWQoKSB7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVubG9hZCgpIHtcblxufVxuXG5leHBvcnQgY29uc3QgbWV0aG9kcyA9IHtcbiAgICBhZGRFZmZlY3QobmFtZU9mRWZmZWN0OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc29sZS5sb2coYEFkZGluZyBlZmZlY3Q6ICR7bmFtZU9mRWZmZWN0fWApO1xuXG4gICAgICAgIGxldCBjYW52YXNOb2RlOiBOb2RlIHwgbnVsbCA9IG51bGw7XG4gICAgICAgIGNvbnN0IHJvb3ROb2RlID0gZGlyZWN0b3IuZ2V0U2NlbmUoKSBhcyBOb2RlO1xuXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGROb2RlIG9mIHJvb3ROb2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGROb2RlLmdldENvbXBvbmVudChDYW52YXMpKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzTm9kZSA9IGNoaWxkTm9kZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY2FudmFzTm9kZSkge1xuICAgICAgICAgICAgY2FudmFzTm9kZSA9IG5ldyBOb2RlKCk7XG4gICAgICAgICAgICBjYW52YXNOb2RlLnNldFBhcmVudChyb290Tm9kZSk7XG4gICAgICAgICAgICBjYW52YXNOb2RlLm5hbWUgPSAnQ2FudmFzJztcbiAgICAgICAgICAgIGNhbnZhc05vZGUubGF5ZXIgPSBMYXllcnMuRW51bS5VSV8yRDtcbiAgICAgICAgICAgIGxldCBjYW52YXNDb21wID0gY2FudmFzTm9kZS5hZGRDb21wb25lbnQoQ2FudmFzKTtcblxuICAgICAgICAgICAgbGV0IGNhbU5vZGUgPSBuZXcgTm9kZSgpO1xuICAgICAgICAgICAgY2FtTm9kZS5zZXRQYXJlbnQoY2FudmFzTm9kZSk7XG4gICAgICAgICAgICBjYW1Ob2RlLm5hbWUgPSAnQ2FtZXJhJztcbiAgICAgICAgICAgIGNhbU5vZGUubGF5ZXIgPSBMYXllcnMuRW51bS5VSV8yRDtcbiAgICAgICAgICAgIGxldCBjYW1Db21wID0gY2FtTm9kZS5hZGRDb21wb25lbnQoQ2FtZXJhKTtcbiAgICAgICAgICAgIGNhbUNvbXAucHJpb3JpdHkgPSA2NTUzNTtcbiAgICAgICAgICAgIGNhbUNvbXAudmlzaWJpbGl0eSA9IExheWVycy5FbnVtLlVJXzJEIHwgTGF5ZXJzLkVudW0uVUlfM0Q7XG4gICAgICAgICAgICBjYW1Db21wLnByb2plY3Rpb24gPSBDYW1lcmEuUHJvamVjdGlvblR5cGUuT1JUSE87XG5cbiAgICAgICAgICAgIGNhbnZhc0NvbXAuY2FtZXJhQ29tcG9uZW50ID0gY2FtQ29tcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBuYW1lT2ZDb3VudCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGROb2RlIG9mIGNhbnZhc05vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUubmFtZS5pbmNsdWRlcyhuYW1lT2ZFZmZlY3QpKSB7XG4gICAgICAgICAgICAgICAgbmFtZU9mQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBub2RlID0gbmV3IE5vZGUoKTtcbiAgICAgICAgbm9kZS5zZXRQYXJlbnQoY2FudmFzTm9kZSk7XG4gICAgICAgIG5vZGUubmFtZSA9IG5hbWVPZkNvdW50ID09PSAwID8gbmFtZU9mRWZmZWN0IDogYCR7bmFtZU9mRWZmZWN0fS0ke25hbWVPZkNvdW50LnRvU3RyaW5nKCkucGFkU3RhcnQoMywgJzAnKX1gO1xuICAgICAgICBub2RlLmxheWVyID0gTGF5ZXJzLkVudW0uVUlfMkQ7XG5cbiAgICAgICAgbGV0IGNsYXNzSUQgPSAnJztcbiAgICAgICAgaWYgKG5hbWVPZkVmZmVjdCA9PT0gJ1Nwcml0ZUVmZmVjdENvbG9yJykge1xuICAgICAgICAgICAgY2xhc3NJRCA9ICdjNjQ5NkJ2MGR4QUFwU29VZzQyaDVMeic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xhc3NJRCAhPT0gJycpIHtcbiAgICAgICAgICAgIEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ3NjZW5lJywgJ2NyZWF0ZS1jb21wb25lbnQnLCB7XG4gICAgICAgICAgICAgICAgdXVpZDogbm9kZS51dWlkLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogY2xhc3NJRFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIGNsYXNzIElEIGZvdW5kIGZvciBlZmZlY3Q6ICcgKyBuYW1lT2ZFZmZlY3QpO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==