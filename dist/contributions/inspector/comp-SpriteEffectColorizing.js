'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ready = exports.update = exports.$ = exports.template = void 0;
const util_1 = require("../../util");
const comp_Sprite_1 = require("./comp-Sprite");
exports.template = `
${comp_Sprite_1.sprite_template}

<ui-section class="config" header="Effect Props" expand>
    <ui-prop type="dump" class="effectAsset"></ui-prop>
    <ui-prop type="dump" class="effectColor"></ui-prop>
    <ui-prop type="dump" class="is2Din3D"></ui-prop>
    <ui-prop type="dump" class="sampleFromRT"></ui-prop>
    <ui-button class="reload" style="height:24px;margin:16px 0;">Reload Asset</ui-button>

    <ui-prop type="dump" class="rChannelMin"></ui-prop>
    <ui-prop type="dump" class="rChannelMax"></ui-prop>
    <ui-prop type="dump" class="gChannelMin"></ui-prop>
    <ui-prop type="dump" class="gChannelMax"></ui-prop>
    <ui-prop type="dump" class="bChannelMin"></ui-prop>
    <ui-prop type="dump" class="bChannelMax"></ui-prop>
</ui-section>
`;
const effectConst = {
    effectAsset: '.effectAsset',
    effectColor: '.effectColor',
    is2Din3D: '.is2Din3D',
    sampleFromRT: '.sampleFromRT',
    reload: '.reload',
    rChannelMin: '.rChannelMin',
    rChannelMax: '.rChannelMax',
    gChannelMin: '.gChannelMin',
    gChannelMax: '.gChannelMax',
    bChannelMin: '.bChannelMin',
    bChannelMax: '.bChannelMax',
};
exports.$ = Object.assign(Object.assign({}, comp_Sprite_1.spriteConst), effectConst);
function update(dump) {
    comp_Sprite_1.base_sprite_update.call(this, dump);
    // effect props
    this.$.effectAsset.render(dump.value.effectAsset);
    this.$.effectColor.render(dump.value.effectColor);
    this.$.is2Din3D.render(dump.value.is2Din3D);
    this.$.sampleFromRT.render(dump.value.sampleFromRT);
    if (typeof this.$.reload.render === "function") {
        this.$.reload.render(dump.value.label);
    }
    this.$.rChannelMin.render(dump.value.rChannelMin);
    this.$.rChannelMax.render(dump.value.rChannelMax);
    this.$.gChannelMin.render(dump.value.gChannelMin);
    this.$.gChannelMax.render(dump.value.gChannelMax);
    this.$.bChannelMin.render(dump.value.bChannelMin);
    this.$.bChannelMax.render(dump.value.bChannelMax);
}
exports.update = update;
let isInit = false;
async function ready() {
    this.$.reload.addEventListener("confirm", async () => {
        await util_1.assignEffectAsset('SpriteEffectColorizing');
        await util_1.reimportAsset();
    });
    if (!isInit) {
        // await assignEffectAsset('SpriteEffectColorizing');
        // await reimportAsset();
        isInit = true;
    }
}
exports.ready = ready;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcC1TcHJpdGVFZmZlY3RDb2xvcml6aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc291cmNlL2NvbnRyaWJ1dGlvbnMvaW5zcGVjdG9yL2NvbXAtU3ByaXRlRWZmZWN0Q29sb3JpemluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7OztBQUViLHFDQUE4RDtBQUM5RCwrQ0FBMkY7QUFFOUUsUUFBQSxRQUFRLEdBQUc7RUFDdEIsNkJBQWU7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQmhCLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBRztJQUNoQixXQUFXLEVBQUUsY0FBYztJQUMzQixXQUFXLEVBQUUsY0FBYztJQUMzQixRQUFRLEVBQUUsV0FBVztJQUNyQixZQUFZLEVBQUUsZUFBZTtJQUM3QixNQUFNLEVBQUUsU0FBUztJQUNqQixXQUFXLEVBQUUsY0FBYztJQUMzQixXQUFXLEVBQUUsY0FBYztJQUMzQixXQUFXLEVBQUUsY0FBYztJQUMzQixXQUFXLEVBQUUsY0FBYztJQUMzQixXQUFXLEVBQUUsY0FBYztJQUMzQixXQUFXLEVBQUUsY0FBYztDQUM5QixDQUFBO0FBRVksUUFBQSxDQUFDLG1DQUFRLHlCQUFXLEdBQUssV0FBVyxFQUFHO0FBRXBELFNBQWdCLE1BQU0sQ0FBMkIsSUFBUztJQUN0RCxnQ0FBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXBDLGVBQWU7SUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwRCxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLFVBQVUsRUFBRTtRQUM1QyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMxQztJQUNELElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFqQkQsd0JBaUJDO0FBRUQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBRVosS0FBSyxVQUFVLEtBQUs7SUFDdkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2pELE1BQU0sd0JBQWlCLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNsRCxNQUFNLG9CQUFhLEVBQUUsQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDVCxxREFBcUQ7UUFDckQseUJBQXlCO1FBQ3pCLE1BQU0sR0FBRyxJQUFJLENBQUM7S0FDakI7QUFDTCxDQUFDO0FBWEQsc0JBV0MiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgeyBhc3NpZ25FZmZlY3RBc3NldCwgcmVpbXBvcnRBc3NldCB9IGZyb20gXCIuLi8uLi91dGlsXCI7XHJcbmltcG9ydCB7IFNlbGVjdG9yLCBiYXNlX3Nwcml0ZV91cGRhdGUsIHNwcml0ZUNvbnN0LCBzcHJpdGVfdGVtcGxhdGUgfSBmcm9tIFwiLi9jb21wLVNwcml0ZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gYFxyXG4ke3Nwcml0ZV90ZW1wbGF0ZX1cclxuXHJcbjx1aS1zZWN0aW9uIGNsYXNzPVwiY29uZmlnXCIgaGVhZGVyPVwiRWZmZWN0IFByb3BzXCIgZXhwYW5kPlxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cImVmZmVjdEFzc2V0XCI+PC91aS1wcm9wPlxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cImVmZmVjdENvbG9yXCI+PC91aS1wcm9wPlxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cImlzMkRpbjNEXCI+PC91aS1wcm9wPlxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cInNhbXBsZUZyb21SVFwiPjwvdWktcHJvcD5cclxuICAgIDx1aS1idXR0b24gY2xhc3M9XCJyZWxvYWRcIiBzdHlsZT1cImhlaWdodDoyNHB4O21hcmdpbjoxNnB4IDA7XCI+UmVsb2FkIEFzc2V0PC91aS1idXR0b24+XHJcblxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cInJDaGFubmVsTWluXCI+PC91aS1wcm9wPlxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cInJDaGFubmVsTWF4XCI+PC91aS1wcm9wPlxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cImdDaGFubmVsTWluXCI+PC91aS1wcm9wPlxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cImdDaGFubmVsTWF4XCI+PC91aS1wcm9wPlxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cImJDaGFubmVsTWluXCI+PC91aS1wcm9wPlxyXG4gICAgPHVpLXByb3AgdHlwZT1cImR1bXBcIiBjbGFzcz1cImJDaGFubmVsTWF4XCI+PC91aS1wcm9wPlxyXG48L3VpLXNlY3Rpb24+XHJcbmA7XHJcblxyXG5jb25zdCBlZmZlY3RDb25zdCA9IHtcclxuICAgIGVmZmVjdEFzc2V0OiAnLmVmZmVjdEFzc2V0JyxcclxuICAgIGVmZmVjdENvbG9yOiAnLmVmZmVjdENvbG9yJyxcclxuICAgIGlzMkRpbjNEOiAnLmlzMkRpbjNEJyxcclxuICAgIHNhbXBsZUZyb21SVDogJy5zYW1wbGVGcm9tUlQnLFxyXG4gICAgcmVsb2FkOiAnLnJlbG9hZCcsXHJcbiAgICByQ2hhbm5lbE1pbjogJy5yQ2hhbm5lbE1pbicsXHJcbiAgICByQ2hhbm5lbE1heDogJy5yQ2hhbm5lbE1heCcsXHJcbiAgICBnQ2hhbm5lbE1pbjogJy5nQ2hhbm5lbE1pbicsXHJcbiAgICBnQ2hhbm5lbE1heDogJy5nQ2hhbm5lbE1heCcsXHJcbiAgICBiQ2hhbm5lbE1pbjogJy5iQ2hhbm5lbE1pbicsXHJcbiAgICBiQ2hhbm5lbE1heDogJy5iQ2hhbm5lbE1heCcsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCAkID0geyAuLi5zcHJpdGVDb25zdCwgLi4uZWZmZWN0Q29uc3QgfTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUodGhpczogU2VsZWN0b3I8dHlwZW9mICQ+LCBkdW1wOiBhbnkpIHtcclxuICAgIGJhc2Vfc3ByaXRlX3VwZGF0ZS5jYWxsKHRoaXMsIGR1bXApO1xyXG5cclxuICAgIC8vIGVmZmVjdCBwcm9wc1xyXG4gICAgdGhpcy4kLmVmZmVjdEFzc2V0LnJlbmRlcihkdW1wLnZhbHVlLmVmZmVjdEFzc2V0KTtcclxuICAgIHRoaXMuJC5lZmZlY3RDb2xvci5yZW5kZXIoZHVtcC52YWx1ZS5lZmZlY3RDb2xvcik7XHJcbiAgICB0aGlzLiQuaXMyRGluM0QucmVuZGVyKGR1bXAudmFsdWUuaXMyRGluM0QpO1xyXG4gICAgdGhpcy4kLnNhbXBsZUZyb21SVC5yZW5kZXIoZHVtcC52YWx1ZS5zYW1wbGVGcm9tUlQpO1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLiQucmVsb2FkLnJlbmRlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgdGhpcy4kLnJlbG9hZC5yZW5kZXIoZHVtcC52YWx1ZS5sYWJlbCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLiQuckNoYW5uZWxNaW4ucmVuZGVyKGR1bXAudmFsdWUuckNoYW5uZWxNaW4pO1xyXG4gICAgdGhpcy4kLnJDaGFubmVsTWF4LnJlbmRlcihkdW1wLnZhbHVlLnJDaGFubmVsTWF4KTtcclxuICAgIHRoaXMuJC5nQ2hhbm5lbE1pbi5yZW5kZXIoZHVtcC52YWx1ZS5nQ2hhbm5lbE1pbik7XHJcbiAgICB0aGlzLiQuZ0NoYW5uZWxNYXgucmVuZGVyKGR1bXAudmFsdWUuZ0NoYW5uZWxNYXgpO1xyXG4gICAgdGhpcy4kLmJDaGFubmVsTWluLnJlbmRlcihkdW1wLnZhbHVlLmJDaGFubmVsTWluKTtcclxuICAgIHRoaXMuJC5iQ2hhbm5lbE1heC5yZW5kZXIoZHVtcC52YWx1ZS5iQ2hhbm5lbE1heCk7XHJcbn1cclxuXHJcbmxldCBpc0luaXQgPSBmYWxzZTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkeSh0aGlzOiBTZWxlY3Rvcjx0eXBlb2YgJD4pIHtcclxuICAgIHRoaXMuJC5yZWxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbmZpcm1cIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IGFzc2lnbkVmZmVjdEFzc2V0KCdTcHJpdGVFZmZlY3RDb2xvcml6aW5nJyk7XHJcbiAgICAgICAgYXdhaXQgcmVpbXBvcnRBc3NldCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKCFpc0luaXQpIHtcclxuICAgICAgICAvLyBhd2FpdCBhc3NpZ25FZmZlY3RBc3NldCgnU3ByaXRlRWZmZWN0Q29sb3JpemluZycpO1xyXG4gICAgICAgIC8vIGF3YWl0IHJlaW1wb3J0QXNzZXQoKTtcclxuICAgICAgICBpc0luaXQgPSB0cnVlO1xyXG4gICAgfVxyXG59Il19