"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SpriteEffectBase_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpriteEffectBase = void 0;
const cc_1 = require("cc");
const env_1 = require("cc/env");
const { ccclass, property } = cc_1._decorator;
let SpriteEffectBase = SpriteEffectBase_1 = class SpriteEffectBase extends cc_1.Sprite {
    constructor() {
        super(...arguments);
        this.effectAsset = null;
        this._effectIndex = -1;
        this._effectColor = new cc_1.Color(255, 255, 255, 255);
        this._is2Din3D = false;
    }
    //#region effectColor
    set effectColor(val) {
        this._effectColor = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this.reflashParams();
        }
    }
    get effectColor() {
        return this._effectColor;
    }
    //#endregion
    //#region is2Din3D
    set is2Din3D(val) {
        this._is2Din3D = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.init(this.countOfProps);
            this.reflashParams();
        }
        else {
            this.reflashParams();
        }
    }
    get is2Din3D() {
        return this._is2Din3D;
    }
    //#endregion
    //#region methods
    get countOfProps() {
        const num = Math.ceil(this.countOfUsedFloats / 4.0);
        return num;
    }
    init(countOfProps) {
        const unionKey = this.getPropsUnionKey();
        cc_1.log(`init: ${unionKey}`);
        // Step1: 取的當前的effectIndex
        if (!SpriteEffectBase_1._s_effectMap.has(unionKey)) {
            const temp = new Array(768).fill(""); // R/G/B (0~255) => 256 * 3 = 768
            SpriteEffectBase_1._s_effectMap.set(unionKey, temp);
        }
        this._effectIndex = SpriteEffectBase_1._s_effectMap.get(unionKey).findIndex((v) => v === this.node.uuid);
        if (this._effectIndex === -1) {
            this._effectIndex = SpriteEffectBase_1._s_effectMap.get(unionKey).findIndex((v) => v === "");
            if (this._effectIndex === -1) {
                cc_1.error("Effect map is full!");
                return;
            }
        }
        SpriteEffectBase_1._s_effectMap.get(unionKey)[this._effectIndex] = this.node.uuid;
        if (this.propGroupIdx === 0) {
            this.color = new cc_1.Color(this._effectIndex, 0, 0, 255);
        }
        else if (this.propGroupIdx === 1) {
            this.color = new cc_1.Color(255, (this._effectIndex - 256 + 1), 0, 255);
        }
        else if (this.propGroupIdx === 2) {
            this.color = new cc_1.Color(255, 255, (this._effectIndex - 256 - 256 + 1), 255);
        }
        else {
            cc_1.error(`The prop group index, ${this.propGroupIdx}, is out of range!`);
            return;
        }
        // Step2: 初始化Effect props
        if (!SpriteEffectBase_1._s_effectProps.has(unionKey)) {
            const temp = new Array(3).fill(null); // Only use R/G/B 3 channels
            SpriteEffectBase_1._s_effectProps.set(unionKey, temp);
        }
        if (SpriteEffectBase_1._s_effectProps.get(unionKey)[this.propGroupIdx] === null) {
            const w = 256 * countOfProps;
            const h = 1;
            let propBuffer = new Float32Array(w * h * 4);
            for (let y = 0; y < h; y++) {
                for (let x = 0; x < w; x++) {
                    const index = (y * w + x) * 4;
                    propBuffer[index] = 1;
                    propBuffer[index + 1] = 0;
                    propBuffer[index + 2] = 1;
                    propBuffer[index + 3] = 1;
                }
            }
            let propsTexture = new cc_1.Texture2D();
            propsTexture.setFilters(cc_1.Texture2D.Filter.NEAREST, cc_1.Texture2D.Filter.NEAREST);
            propsTexture.reset({
                width: w,
                height: h,
                format: cc_1.Texture2D.PixelFormat.RGBA32F,
                mipmapLevel: 0
            });
            propsTexture.uploadData(propBuffer);
            let mat = this.initMaterial();
            mat.setProperty('propsTexture', propsTexture);
            SpriteEffectBase_1._s_effectProps.get(unionKey)[this.propGroupIdx] = {
                mat: mat,
                propBuffer: propBuffer,
                propTexture: propsTexture
            };
        }
        this.customMaterial = SpriteEffectBase_1._s_effectProps.get(unionKey)[this.propGroupIdx].mat;
    }
    reflashParams() {
        const index = this.getBufferIndex();
        const effectProps = SpriteEffectBase_1._s_effectProps.get(this.getPropsUnionKey())[this.propGroupIdx];
        this.updateParams(index, effectProps.propBuffer);
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            effectProps.propTexture.uploadData(effectProps.propBuffer);
        }
        else {
            this.setDirty(this.propGroupIdx, true);
        }
    }
    get propGroupIdx() {
        return Math.floor(this._effectIndex / 256);
    }
    getUV(uv) {
        let minU = Math.min(uv[0], uv[2], uv[4], uv[6]);
        let minV = Math.min(uv[1], uv[3], uv[5], uv[7]);
        let maxU = Math.max(uv[0], uv[2], uv[4], uv[6]);
        let maxV = Math.max(uv[1], uv[3], uv[5], uv[7]);
        let width = maxU - minU;
        let height = maxV - minV;
        return new cc_1.Vec4(minU, minV, width, height);
    }
    getBufferIndex() {
        let quotient = this._effectIndex / 256;
        let fractional = quotient - Math.floor(quotient);
        let x = Math.floor(fractional * (256 * this.countOfProps));
        const index = x * 4;
        return index;
    }
    //#endregion
    //#region life cycle
    onLoad() {
        this.init(this.countOfProps);
    }
    start() {
        this.reflashParams();
    }
    onDestroy() {
        const unionKey = this.getPropsUnionKey();
        if (SpriteEffectBase_1._s_effectMap.has(unionKey)) {
            const index = SpriteEffectBase_1._s_effectMap.get(unionKey).findIndex((v) => v === this.node.uuid);
            if (index === -1) {
                cc_1.error("Effect index is not found!");
                return;
            }
            SpriteEffectBase_1._s_effectMap.get(unionKey)[index] = "";
        }
        else {
            cc_1.error(`The effect map of ${unionKey} is not found!`);
        }
    }
    lateUpdate(dt) {
        if (this.isDirty(this.propGroupIdx)) {
            cc_1.log(`${this.constructor.name}'s effect props is DIRTY!`);
            const unionKey = this.getPropsUnionKey();
            const effectProps = SpriteEffectBase_1._s_effectProps.get(unionKey)[this.propGroupIdx];
            effectProps.propTexture.uploadData(effectProps.propBuffer);
            this.setDirty(this.propGroupIdx, false);
        }
    }
};
SpriteEffectBase._s_effectMap = new Map();
SpriteEffectBase._s_effectProps = new Map();
__decorate([
    property({ type: cc_1.EffectAsset, tooltip: '指定效果EffectAsset' })
], SpriteEffectBase.prototype, "effectAsset", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_1.Color, tooltip: "My Color" })
], SpriteEffectBase.prototype, "effectColor", null);
__decorate([
    property
], SpriteEffectBase.prototype, "_effectColor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: '當使用RenderRoot2D時使用' })
], SpriteEffectBase.prototype, "is2Din3D", null);
__decorate([
    property
], SpriteEffectBase.prototype, "_is2Din3D", void 0);
SpriteEffectBase = SpriteEffectBase_1 = __decorate([
    ccclass('SpriteEffectBase')
], SpriteEffectBase);
exports.SpriteEffectBase = SpriteEffectBase;
//# sourceMappingURL=data:application/json;base64,