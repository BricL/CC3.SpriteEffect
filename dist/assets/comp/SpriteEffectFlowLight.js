"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpriteEffectFlowLight = void 0;
const cc_1 = require("cc");
const env_1 = require("cc/env");
const SpriteEffectBase_1 = require("./SpriteEffectBase");
const { ccclass, property } = cc_1._decorator;
let SpriteEffectFlowLight = class SpriteEffectFlowLight extends SpriteEffectBase_1.SpriteEffectBase {
    constructor() {
        super(...arguments);
        this._lightColor = new cc_1.Color(1, 1, 1, 1);
        this._lightWidth = 0.5;
        this._soft = 0.7;
        this._offset = -8.0;
        this._rotation = 2.4;
    }
    //#region lightColor
    set lightColor(val) {
        this._lightColor.set(val);
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get lightColor() {
        return this._lightColor;
    }
    //#endregion
    //#region lightWidth
    set lightWidth(val) {
        this._lightWidth = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get lightWidth() {
        return this._lightWidth;
    }
    //#endregion
    //#region soft
    set soft(val) {
        this._soft = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get soft() {
        return this._soft;
    }
    //#endregion
    //#region offset
    set offset(val) {
        this._offset = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get offset() {
        return this._offset;
    }
    //#endregion
    //#region rotation
    set rotation(val) {
        this._rotation = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get rotation() {
        return this._rotation;
    }
    //#endregion
    //#region override
    /**
     * @override SpriteEffectBase
     */
    get countOfUsedFloats() {
        return 16;
    }
    /**
     * @override SpriteEffectBase
     */
    getPropsUnionKey() {
        return `${this.constructor.name}_${this._is2Din3D}`;
    }
    /**
     * @override SpriteEffectBase
     */
    updateParams(index, propBuffer) {
        const baseUV = this.getUV(this.spriteFrame.uv);
        propBuffer[index + 0] = this._effectColor.r / 255;
        propBuffer[index + 1] = this._effectColor.g / 255;
        propBuffer[index + 2] = this._effectColor.b / 255;
        propBuffer[index + 3] = this._effectColor.a / 255;
        propBuffer[index + 4] = baseUV.x;
        propBuffer[index + 5] = baseUV.y;
        propBuffer[index + 6] = baseUV.z;
        propBuffer[index + 7] = baseUV.w;
        propBuffer[index + 8] = this._lightColor.r / 255;
        propBuffer[index + 9] = this._lightColor.g / 255;
        propBuffer[index + 10] = this._lightColor.b / 255;
        propBuffer[index + 11] = this._lightColor.a / 255;
        propBuffer[index + 12] = this._lightWidth;
        propBuffer[index + 13] = this._soft;
        propBuffer[index + 14] = this._offset;
        propBuffer[index + 15] = this._rotation;
    }
    /**
     * @override SpriteEffectBase
     */
    initMaterial() {
        let mat = new cc_1.Material();
        mat.initialize({
            effectAsset: this.effectAsset,
            defines: {},
            technique: this._is2Din3D ? 1 : 0
        });
        return mat;
    }
};
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: '流光颜色' })
], SpriteEffectFlowLight.prototype, "lightColor", null);
__decorate([
    property
], SpriteEffectFlowLight.prototype, "_lightColor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.1, 2.0, 0.001], tooltip: '流光寬度' })
], SpriteEffectFlowLight.prototype, "lightWidth", null);
__decorate([
    property
], SpriteEffectFlowLight.prototype, "_lightWidth", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 10.0, 0.001], tooltip: '柔邊程度' })
], SpriteEffectFlowLight.prototype, "soft", null);
__decorate([
    property
], SpriteEffectFlowLight.prototype, "_soft", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [-3.0, 3.0, 0.001], tooltip: '偏移量' })
], SpriteEffectFlowLight.prototype, "offset", null);
__decorate([
    property
], SpriteEffectFlowLight.prototype, "_offset", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 6.28, 0.1], tooltip: '流光角度' })
], SpriteEffectFlowLight.prototype, "rotation", null);
__decorate([
    property
], SpriteEffectFlowLight.prototype, "_rotation", void 0);
SpriteEffectFlowLight = __decorate([
    ccclass('SpriteEffectFlowLight')
], SpriteEffectFlowLight);
exports.SpriteEffectFlowLight = SpriteEffectFlowLight;
//# sourceMappingURL=data:application/json;base64,