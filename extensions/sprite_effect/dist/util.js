"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoAssignEffectAsset = void 0;
async function autoAssignEffectAsset(effectCompName) {
    try {
        console.log('Effect自動掛載啟動');
        const uuids = Editor.Selection.getSelected('node');
        const node = await Editor.Message.request('scene', 'query-node', uuids[0]);
        if (!node) {
            console.warn(`未選中節點`);
            return;
        }
        const index = node.__comps__.findIndex((v) => v.type === effectCompName);
        if (index === -1) {
            console.warn(`節點未掛載${effectCompName}組件`);
            return;
        }
        const effectFileName = effectCompName.replace(/([A-Z])/g, '_$1').toLowerCase().slice(1);
        const url = `db://assets/${effectFileName}.effect`;
        const res = await Editor.Message.request('asset-db', 'query-asset-info', url);
        const uuid = res.uuid;
        const success = await Editor.Message.request('scene', 'set-property', {
            uuid: node.uuid.value,
            path: `__comps__.${index}.effectAsset`,
            dump: {
                type: 'cc.EffectAsset',
                value: {
                    uuid,
                },
            },
        });
        if (success) {
            console.log(`Effect自動掛載成功`);
        }
        else {
            console.log(`Effect自動掛載失敗`);
        }
    }
    catch (ex) {
        console.error(`autoAssignEffectAsset: ${ex}`);
    }
}
exports.autoAssignEffectAsset = autoAssignEffectAsset;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NvdXJjZS91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFPLEtBQUssVUFBVSxxQkFBcUIsQ0FBQyxjQUFzQjtJQUM5RCxJQUFJO1FBQ0EsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUUzQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEIsT0FBTztTQUNWO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLENBQUM7UUFDOUUsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsY0FBYyxJQUFJLENBQUMsQ0FBQztZQUN6QyxPQUFPO1NBQ1Y7UUFFRCxNQUFNLGNBQWMsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEYsTUFBTSxHQUFHLEdBQUcsZUFBZSxjQUFjLFNBQVMsQ0FBQztRQUNuRCxNQUFNLEdBQUcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUU5RSxNQUFNLElBQUksR0FBRyxHQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLE1BQU0sT0FBTyxHQUFHLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRTtZQUNsRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFlO1lBQy9CLElBQUksRUFBRSxhQUFhLEtBQUssY0FBYztZQUN0QyxJQUFJLEVBQUU7Z0JBQ0YsSUFBSSxFQUFFLGdCQUFnQjtnQkFDdEIsS0FBSyxFQUFFO29CQUNILElBQUk7aUJBQ1A7YUFDSjtTQUNKLENBQUMsQ0FBQztRQUVILElBQUksT0FBTyxFQUFFO1lBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUMvQjthQUNJO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUMvQjtLQUNKO0lBQUMsT0FBTyxFQUFFLEVBQUU7UUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLDBCQUEwQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ2pEO0FBQ0wsQ0FBQztBQTFDRCxzREEwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYXN5bmMgZnVuY3Rpb24gYXV0b0Fzc2lnbkVmZmVjdEFzc2V0KGVmZmVjdENvbXBOYW1lOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZygnRWZmZWN06Ieq5YuV5o6b6LyJ5ZWf5YuVJylcblxuICAgICAgICBjb25zdCB1dWlkcyA9IEVkaXRvci5TZWxlY3Rpb24uZ2V0U2VsZWN0ZWQoJ25vZGUnKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGF3YWl0IEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ3NjZW5lJywgJ3F1ZXJ5LW5vZGUnLCB1dWlkc1swXSk7XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGDmnKrpgbjkuK3nr4Dpu55gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluZGV4ID0gbm9kZS5fX2NvbXBzX18uZmluZEluZGV4KCh2OiBhbnkpID0+IHYudHlwZSA9PT0gZWZmZWN0Q29tcE5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYOevgOm7nuacquaOm+i8iSR7ZWZmZWN0Q29tcE5hbWV957WE5Lu2YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlZmZlY3RGaWxlTmFtZSA9IGVmZmVjdENvbXBOYW1lLnJlcGxhY2UoLyhbQS1aXSkvZywgJ18kMScpLnRvTG93ZXJDYXNlKCkuc2xpY2UoMSk7XG4gICAgICAgIGNvbnN0IHVybCA9IGBkYjovL2Fzc2V0cy8ke2VmZmVjdEZpbGVOYW1lfS5lZmZlY3RgO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBFZGl0b3IuTWVzc2FnZS5yZXF1ZXN0KCdhc3NldC1kYicsICdxdWVyeS1hc3NldC1pbmZvJywgdXJsKTtcblxuICAgICAgICBjb25zdCB1dWlkID0gcmVzIS51dWlkO1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgRWRpdG9yLk1lc3NhZ2UucmVxdWVzdCgnc2NlbmUnLCAnc2V0LXByb3BlcnR5Jywge1xuICAgICAgICAgICAgdXVpZDogbm9kZS51dWlkLnZhbHVlIGFzIHN0cmluZyxcbiAgICAgICAgICAgIHBhdGg6IGBfX2NvbXBzX18uJHtpbmRleH0uZWZmZWN0QXNzZXRgLFxuICAgICAgICAgICAgZHVtcDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYy5FZmZlY3RBc3NldCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdXVpZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFZmZlY3Toh6rli5XmjpvovInmiJDlip9gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFZmZlY3Toh6rli5XmjpvovInlpLHmlZdgKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYGF1dG9Bc3NpZ25FZmZlY3RBc3NldDogJHtleH1gKTtcbiAgICB9XG59Il19