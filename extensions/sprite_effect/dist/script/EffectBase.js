"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EffectBase = void 0;
const cc_1 = require("cc");
const cc_2 = require("cc");
const cc_3 = require("cc");
const cc_4 = require("cc");
const cc_5 = require("cc");
const env_1 = require("cc/env");
const { ccclass, requireComponent, executeInEditMode, property } = cc_5._decorator;
let EffectBase = class EffectBase extends cc_5.Component {
    constructor() {
        super(...arguments);
        this.effectAsset = null;
        this._is2Din3D = false;
        //#endregion
        this._sprite = null;
        this._isDirty = false;
        this._reload = false;
        this._params = new Map();
        this._isParamsDirty = false;
    }
    //#region is2Din3D
    get is2Din3D() {
        return this._is2Din3D;
    }
    set is2Din3D(val) {
        this._is2Din3D = val;
        this._is2Din3DChanged(this._is2Din3D);
    }
    //#endregion
    //#region reloadEffect
    get reloadEffect() {
        return this._reload;
    }
    set reloadEffect(val) {
        this._reload = val;
        this.reloadTsFile();
    }
    async reloadTsFile() {
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            const reloadTsFile_000 = await Editor.Message.request("asset-db", "reimport-asset", "853e8fbf-9769-49a8-b2d2-0016390b6953");
        }
    }
    ;
    autoAssignEffectAsset() {
        if (env_1.EDITOR_NOT_IN_PREVIEW && this.effectAsset === null) {
            setTimeout(async () => {
                try {
                    const uuids = Editor.Selection.getSelected('node');
                    const node = await Editor.Message.request('scene', 'query-node', uuids[0]);
                    if (!node) {
                        console.warn(`未選中節點`);
                        return;
                    }
                    const effectCompName = this.constructor.name;
                    const index = node.__comps__.findIndex((v) => v.type === effectCompName);
                    if (index === -1) {
                        console.warn(`節點未掛載${effectCompName}組件`);
                        return;
                    }
                    const effectFileName = effectCompName.replace(/([A-Z])/g, '_$1').toLowerCase().slice(1);
                    const url = `db://sprite_effect/effect/${effectFileName}.effect`;
                    const res = await Editor.Message.request('asset-db', 'query-asset-info', url);
                    const uuid = res.uuid;
                    const success = await Editor.Message.request('scene', 'set-property', {
                        uuid: node.uuid.value,
                        path: `__comps__.${index}.effectAsset`,
                        dump: {
                            type: 'cc.EffectAsset',
                            value: {
                                uuid,
                            },
                        },
                    });
                    if (success) {
                        console.log(`Effect自動掛載成功`);
                        await this.reloadTsFile();
                    }
                    else {
                        console.log(`Effect自動掛載失敗`);
                    }
                }
                catch (ex) {
                    console.error(`autoAssignEffectAsset: ${ex}`);
                }
            }, 100);
        }
    }
    onLoad() {
        this._sprite = this.getComponent(cc_4.Sprite);
        this._instMaterial();
    }
    start() {
        this.autoAssignEffectAsset();
    }
    update(dt) {
        if (this._isParamsDirty) {
            this._params.forEach((val, key) => {
                if (val.is_dirty) {
                    this._updateParams(val.key, val.idx);
                    val.is_dirty = false;
                }
            });
            this._isParamsDirty = false;
        }
    }
    /**
     * @virtual
     * @description: 當Sprite被用在3D時(掛載RenderRoot2D時)，需要開啟深度測試才能正確顯示深度
     */
    _is2Din3DChanged(enable) {
        this._instMaterial();
    }
    _setParams(key, idx) {
        this._params.set(key, { key: key, idx: idx, is_dirty: true });
        this._isParamsDirty = true;
    }
    _setParamsDirty(key) {
        if (this._params.has(key)) {
            this._params.get(key).is_dirty = true;
            this._isParamsDirty = true;
        }
        else {
            cc_1.log(`EffectBase._setParamsDirty: key ${key} not found`);
        }
    }
    _getUV(uv) {
        let minU = Math.min(uv[0], uv[2], uv[4], uv[6]);
        let minV = Math.min(uv[1], uv[3], uv[5], uv[7]);
        let maxU = Math.max(uv[0], uv[2], uv[4], uv[6]);
        let maxV = Math.max(uv[1], uv[3], uv[5], uv[7]);
        let width = maxU - minU;
        let height = maxV - minV;
        return new cc_3.Vec4(minU, minV, width, height);
    }
};
__decorate([
    property({ type: cc_1.EffectAsset, tooltip: '指定效果EffectAsset' })
], EffectBase.prototype, "effectAsset", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: '當使用RenderRoot2D時使用' })
], EffectBase.prototype, "is2Din3D", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, visible: true, tooltip: '當使用RenderRoot2D時使用' })
], EffectBase.prototype, "_is2Din3D", void 0);
__decorate([
    property({ type: cc_2.CCBoolean, tooltip: '手動刷新，當效果在Editor沒有顯示時' })
], EffectBase.prototype, "reloadEffect", null);
EffectBase = __decorate([
    ccclass('EffectBase'),
    requireComponent(cc_4.Sprite),
    executeInEditMode(true)
], EffectBase);
exports.EffectBase = EffectBase;
//# sourceMappingURL=data:application/json;base64,