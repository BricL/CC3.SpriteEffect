"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EffectColor = exports.BlurMode = exports.ColorMode = exports.ToneMode = void 0;
const cc_1 = require("cc");
const cc_2 = require("cc");
const cc_3 = require("cc");
const cc_4 = require("cc");
const cc_5 = require("cc");
const cc_6 = require("cc");
const cc_7 = require("cc");
const EffectBase_1 = require("./EffectBase");
const { ccclass, property } = cc_2._decorator;
var ToneMode;
(function (ToneMode) {
    ToneMode[ToneMode["GRAY"] = 0] = "GRAY";
    ToneMode[ToneMode["NEGA"] = 1] = "NEGA";
    ToneMode[ToneMode["SEPIA"] = 2] = "SEPIA";
    ToneMode[ToneMode["NORMAL"] = 3] = "NORMAL";
})(ToneMode = exports.ToneMode || (exports.ToneMode = {}));
var ColorMode;
(function (ColorMode) {
    ColorMode[ColorMode["ADD"] = 0] = "ADD";
    ColorMode[ColorMode["SUB"] = 1] = "SUB";
    ColorMode[ColorMode["FILL"] = 2] = "FILL";
    ColorMode[ColorMode["MULT"] = 3] = "MULT";
})(ColorMode = exports.ColorMode || (exports.ColorMode = {}));
var BlurMode;
(function (BlurMode) {
    BlurMode[BlurMode["NONE"] = 0] = "NONE";
    BlurMode[BlurMode["GAUSSIAN"] = 1] = "GAUSSIAN";
})(BlurMode = exports.BlurMode || (exports.BlurMode = {}));
let EffectColor = class EffectColor extends EffectBase_1.EffectBase {
    constructor() {
        super(...arguments);
        this._toneMode = ToneMode.NORMAL;
        this._toneFactor = 1.0;
        this._colorMode = ColorMode.MULT;
        this._colorFactor = 1.0;
        this._blurMode = BlurMode.NONE;
        this._blurFactor = 1.0;
        //#endregion
        this._blurTextureSize = new cc_5.Vec2(100, 100);
        this._contentSize = new cc_6.math.Size(100, 100);
        this._define_macro = {
            USE_COLOR_TONE_TRANSFORM: true,
            USE_NORMALIZE_UV: true,
            USE_BLUR: false,
            IS_GRAY: false,
            IS_NEGA: false,
            IS_SEPIA: false,
            IS_ADD: false,
            IS_SUB: false,
            IS_FILL: false,
            IS_MULT: false
        };
    }
    //#region toneMode
    get toneMode() {
        return this._toneMode;
    }
    set toneMode(val) {
        this._toneMode = val;
        this._setParamsDirty('_toneMode');
    }
    //#endregion
    //#region toneFactor
    get toneFactor() {
        return this._toneFactor;
    }
    set toneFactor(val) {
        this._toneFactor = val;
        this._setParamsDirty('_toneFactor');
    }
    //#endregion
    //#region colorMode
    get colorMode() {
        return this._colorMode;
    }
    set colorMode(val) {
        this._colorMode = val;
        this._setParamsDirty('_colorMode');
    }
    //#endregion
    //#region colorFactor
    get colorFactor() {
        return this._colorFactor;
    }
    set colorFactor(val) {
        this._colorFactor = val;
        this._setParamsDirty('_colorFactor');
    }
    //#endregion
    //#region blurMode
    get blurMode() {
        return this._blurMode;
    }
    set blurMode(val) {
        this._blurMode = val;
        this._setParamsDirty('_blurMode');
    }
    //#endregion
    //#region blurFactor
    get blurFactor() {
        return this._blurFactor;
    }
    set blurFactor(val) {
        this._blurFactor = val;
        this._setParamsDirty('_blurFactor');
    }
    _instMaterial() {
        this._contentSize = this._sprite.getComponent(cc_7.UITransform).contentSize;
        if (this.effectAsset) {
            switch (this._toneMode) {
                case ToneMode.GRAY:
                    this._define_macro.IS_GRAY = true;
                    break;
                case ToneMode.NEGA:
                    this._define_macro.IS_NEGA = true;
                    break;
                case ToneMode.SEPIA:
                    this._define_macro.IS_SEPIA = true;
                    break;
                case ToneMode.NORMAL:
                    break;
            }
            ;
            switch (this._colorMode) {
                case ColorMode.ADD:
                    this._define_macro.IS_ADD = true;
                    break;
                case ColorMode.SUB:
                    this._define_macro.IS_SUB = true;
                    break;
                case ColorMode.FILL:
                    this._define_macro.IS_FILL = true;
                    break;
                case ColorMode.MULT:
                    this._define_macro.IS_MULT = true;
                    break;
            }
            switch (this._blurMode) {
                case BlurMode.NONE:
                    this._define_macro.USE_BLUR = false;
                    break;
                case BlurMode.GAUSSIAN:
                    this._define_macro.USE_BLUR = true;
                    break;
            }
            this._reflashMaterial();
        }
        else {
            cc_3.error('EffectColor._instMaterial: effectAsset is null');
        }
    }
    _reflashMaterial() {
        let mat = new cc_1.Material();
        mat.initialize({
            effectAsset: this.effectAsset,
            defines: this._define_macro,
            technique: this._is2Din3D ? 1 : 0
        });
        this._setParams('_toneMode', -1);
        this._setParams('_colorMode', -1);
        this._setParams('_blurMode', -1);
        this._setParams('_baseUV', mat.passes[0].getHandle('baseUV'));
        this._setParams('_toneFactor', mat.passes[0].getHandle('toneFactor'));
        this._setParams('_colorFactor', mat.passes[0].getHandle('colorFactor'));
        this._setParams('_blurTextureSize', mat.passes[0].getHandle('blurTextureSize'));
        this._setParams('_blurFactor', mat.passes[0].getHandle('blurFactor'));
        this._sprite.customMaterial = mat;
    }
    _updateParams(key, idx) {
        var _a, _b, _c, _d, _e;
        if (key === '_baseUV') {
            (_a = this._sprite.material) === null || _a === void 0 ? void 0 : _a.passes[0].setUniform(idx, this._getUV(this._sprite.spriteFrame.uv));
        }
        else if (key === '_toneFactor') {
            (_b = this._sprite.material) === null || _b === void 0 ? void 0 : _b.passes[0].setUniform(idx, this._toneFactor);
        }
        else if (key === '_colorFactor') {
            (_c = this._sprite.material) === null || _c === void 0 ? void 0 : _c.passes[0].setUniform(idx, this._colorFactor);
        }
        else if (key === '_blurTextureSize') {
            const baseUV = this._getUV(this._sprite.spriteFrame.uv);
            if (this._sprite.spriteFrame) {
                this._blurTextureSize.x = Math.floor(this._sprite.spriteFrame.width * baseUV.z);
                this._blurTextureSize.y = Math.floor(this._sprite.spriteFrame.height * baseUV.w);
            }
            else {
                this._blurTextureSize.x = this._contentSize.width;
                this._blurTextureSize.y = this._contentSize.height;
            }
            (_d = this._sprite.material) === null || _d === void 0 ? void 0 : _d.passes[0].setUniform(idx, this._blurTextureSize);
        }
        else if (key === '_blurFactor') {
            (_e = this._sprite.material) === null || _e === void 0 ? void 0 : _e.passes[0].setUniform(idx, cc_6.math.lerp(0.0, 1.0, this._blurFactor));
        }
        else if (key === '_toneMode') {
            this._define_macro.IS_GRAY = false;
            this._define_macro.IS_NEGA = false;
            this._define_macro.IS_SEPIA = false;
            switch (this._toneMode) {
                case ToneMode.GRAY:
                    this._define_macro.IS_GRAY = true;
                    break;
                case ToneMode.NEGA:
                    this._define_macro.IS_NEGA = true;
                    break;
                case ToneMode.SEPIA:
                    this._define_macro.IS_SEPIA = true;
                    break;
                case ToneMode.NORMAL:
                    break;
            }
            ;
            this._reflashMaterial();
        }
        else if (key === '_colorMode') {
            this._define_macro.IS_ADD = false;
            this._define_macro.IS_SUB = false;
            this._define_macro.IS_FILL = false;
            this._define_macro.IS_MULT = false;
            switch (this._colorMode) {
                case ColorMode.ADD:
                    this._define_macro.IS_ADD = true;
                    break;
                case ColorMode.SUB:
                    this._define_macro.IS_SUB = true;
                    break;
                case ColorMode.FILL:
                    this._define_macro.IS_FILL = true;
                    break;
                case ColorMode.MULT:
                    this._define_macro.IS_MULT = true;
                    break;
            }
            this._reflashMaterial();
        }
        else if (key === '_blurMode') {
            switch (this._blurMode) {
                case BlurMode.NONE:
                    this._define_macro.USE_BLUR = false;
                    break;
                case BlurMode.GAUSSIAN:
                    this._define_macro.USE_BLUR = true;
                    break;
            }
            this._reflashMaterial();
        }
    }
    _is2Din3DChanged(enable) {
        this._reflashMaterial();
    }
};
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_4.Enum(ToneMode), tooltip: "色調模式" })
], EffectColor.prototype, "toneMode", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, type: cc_4.Enum(ToneMode), tooltip: "色調模式", visible: true })
], EffectColor.prototype, "_toneMode", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "色調程度" })
], EffectColor.prototype, "toneFactor", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "色調程度", visible: true })
], EffectColor.prototype, "_toneFactor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_4.Enum(ColorMode), tooltip: "顏色模式" })
], EffectColor.prototype, "colorMode", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, type: cc_4.Enum(ColorMode), tooltip: "顏色模式", visible: true })
], EffectColor.prototype, "_colorMode", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "顏色程度" })
], EffectColor.prototype, "colorFactor", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "顏色程度", visible: true })
], EffectColor.prototype, "_colorFactor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_4.Enum(BlurMode), tooltip: "模糊模式" })
], EffectColor.prototype, "blurMode", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, type: cc_4.Enum(BlurMode), tooltip: "模糊模式", visible: true })
], EffectColor.prototype, "_blurMode", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: "模糊程度" })
], EffectColor.prototype, "blurFactor", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: "模糊程度", visible: true })
], EffectColor.prototype, "_blurFactor", void 0);
EffectColor = __decorate([
    ccclass('EffectColor')
], EffectColor);
exports.EffectColor = EffectColor;
//# sourceMappingURL=data:application/json;base64,