"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EffectColorizing = void 0;
const cc_1 = require("cc");
const EffectBase_1 = require("./EffectBase");
const { ccclass, property } = cc_1._decorator;
let EffectColorizing = class EffectColorizing extends EffectBase_1.EffectBase {
    constructor() {
        super(...arguments);
        this._rChannelMin = 0;
        this._rChannelMax = 1;
        this._gChannelMin = 0;
        this._gChannelMax = 1;
        this._bChannelMin = 0;
        this._bChannelMax = 1;
    }
    // #region rChannel
    get rChannelMin() {
        return this._rChannelMin;
    }
    set rChannelMin(val) {
        this._rChannelMin = val;
        this._setParamsDirty('rChannel');
    }
    get rChannelMax() {
        return this._rChannelMax;
    }
    set rChannelMax(val) {
        this._rChannelMax = val;
        this._setParamsDirty('rChannel');
    }
    // #endregion
    // #region gChannel
    get gChannelMin() {
        return this._gChannelMin;
    }
    set gChannelMin(val) {
        this._gChannelMin = val;
        this._setParamsDirty('gChannel');
    }
    get gChannelMax() {
        return this._gChannelMax;
    }
    set gChannelMax(val) {
        this._gChannelMax = val;
        this._setParamsDirty('gChannel');
    }
    // #endregion
    // #region bChannel
    get bChannelMin() {
        return this._bChannelMin;
    }
    set bChannelMin(val) {
        this._bChannelMin = val;
        this._setParamsDirty('bChannel');
    }
    get bChannelMax() {
        return this._bChannelMax;
    }
    set bChannelMax(val) {
        this._bChannelMax = val;
        this._setParamsDirty('bChannel');
    }
    // #endregion
    _instMaterial() {
        if (this.effectAsset) {
            let mat = new cc_1.Material();
            mat.initialize({
                effectAsset: this.effectAsset,
                technique: this._is2Din3D ? 1 : 0
            });
            this._setParams('rChannel', mat.passes[0].getHandle('rChannel'));
            this._setParams('gChannel', mat.passes[0].getHandle('gChannel'));
            this._setParams('bChannel', mat.passes[0].getHandle('bChannel'));
            this._sprite.customMaterial = mat;
        }
        else {
            cc_1.error(`${this.constructor.name}: effectAsset or noise texture is null`);
        }
    }
    _updateParams(key, idx) {
        var _a, _b, _c;
        if (key === 'rChannel') {
            (_a = this._sprite.material) === null || _a === void 0 ? void 0 : _a.passes[0].setUniform(idx, new cc_1.Vec2(this._rChannelMin, this._rChannelMax));
        }
        else if (key === 'gChannel') {
            (_b = this._sprite.material) === null || _b === void 0 ? void 0 : _b.passes[0].setUniform(idx, new cc_1.Vec2(this._gChannelMin, this._gChannelMax));
        }
        else if (key === 'bChannel') {
            (_c = this._sprite.material) === null || _c === void 0 ? void 0 : _c.passes[0].setUniform(idx, new cc_1.Vec2(this._bChannelMin, this._bChannelMax));
        }
    }
};
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定R通道Remap顏色最小值' })
], EffectColorizing.prototype, "rChannelMin", null);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定R通道Remap顏色最大值' })
], EffectColorizing.prototype, "rChannelMax", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定R通道Remap顏色最小值', visible: true })
], EffectColorizing.prototype, "_rChannelMin", void 0);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定R通道Remap顏色最大值', visible: true })
], EffectColorizing.prototype, "_rChannelMax", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定G通道Remap顏色最小值' })
], EffectColorizing.prototype, "gChannelMin", null);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定G通道填Remap顏色最大值' })
], EffectColorizing.prototype, "gChannelMax", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定G通道Remap顏色最小值', visible: true })
], EffectColorizing.prototype, "_gChannelMin", void 0);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定G通道Remap顏色最大值', visible: true })
], EffectColorizing.prototype, "_gChannelMax", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定B通道Remap顏色最小值' })
], EffectColorizing.prototype, "bChannelMin", null);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定B通道Remap顏色最大值' })
], EffectColorizing.prototype, "bChannelMax", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定B通道Remap顏色最小值', visible: true })
], EffectColorizing.prototype, "_bChannelMin", void 0);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '指定B通道Remap顏色最大值', visible: true })
], EffectColorizing.prototype, "_bChannelMax", void 0);
EffectColorizing = __decorate([
    ccclass('EffectColorizing')
], EffectColorizing);
exports.EffectColorizing = EffectColorizing;
//# sourceMappingURL=data:application/json;base64,