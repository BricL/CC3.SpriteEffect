"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EffectFlowLight = void 0;
const cc_1 = require("cc");
const cc_2 = require("cc");
const cc_3 = require("cc");
const cc_4 = require("cc");
const cc_5 = require("cc");
const cc_6 = require("cc");
const cc_7 = require("cc");
const env_1 = require("cc/env");
const EffectBase_1 = require("./EffectBase");
const { ccclass, property, requireComponent, executeInEditMode } = cc_7._decorator;
let EffectFlowLight = class EffectFlowLight extends EffectBase_1.EffectBase {
    constructor() {
        super(...arguments);
        this._lightColor = new cc_2.Color(1, 1, 1, 1);
        this._lightWidth = 0.5;
        this._soft = 0.7;
        this._offset = -8.0;
        this._rotation = 2.4;
        //#endregion
        this.play = true;
        this.duration = 1.0;
        this.loop = true;
        this.loop_delay = 0.0;
        this.propsVec4 = new cc_7.Vec4();
    }
    //#region lightColor
    get lightColor() {
        return this._lightColor;
    }
    set lightColor(val) {
        this._lightColor.set(val);
        this._setParamsDirty('_lightColor');
    }
    //#endregion
    //#region lightWidth
    get lightWidth() {
        return this._lightWidth;
    }
    set lightWidth(val) {
        this._lightWidth = val;
        this._setParamsDirty('_lightProp');
    }
    //#endregion
    //#region soft
    get soft() {
        return this._soft;
    }
    set soft(val) {
        this._soft = val;
        this._setParamsDirty('_lightProp');
    }
    //#endregion
    //#region offset
    get offset() {
        return this._offset;
    }
    set offset(val) {
        this._offset = val;
        this._setParamsDirty('_lightProp');
    }
    //#endregion
    //#region rotation
    get rotation() {
        return this._rotation;
    }
    set rotation(val) {
        this._rotation = val;
        this._setParamsDirty('_lightProp');
    }
    onLoad() {
        if (!env_1.EDITOR && this.play) {
            this._offset = -3.0;
        }
        super.onLoad();
    }
    _instMaterial() {
        if (this.effectAsset) {
            let mat = new cc_4.Material();
            mat.initialize({
                effectAsset: this.effectAsset,
                defines: {},
                technique: this._is2Din3D ? 1 : 0
            });
            this._setParams('_baseUV', mat.passes[0].getHandle('_baseUV'));
            this._setParams('_lightColor', mat.passes[0].getHandle('_lightColor'));
            this._setParams('_lightProp', mat.passes[0].getHandle('_lightProp'));
            this._sprite.customMaterial = mat;
            if (this.play) {
                setTimeout(() => {
                    this._play();
                }, 10);
            }
        }
        else {
            cc_3.error('EffectFlowLight: effectAsset is null');
        }
    }
    _updateParams(key, idx) {
        var _a, _b, _c;
        if (key === '_baseUV') {
            (_a = this._sprite.material) === null || _a === void 0 ? void 0 : _a.passes[0].setUniform(idx, this._getUV(this._sprite.spriteFrame.uv));
        }
        else if (key === '_lightColor') {
            (_b = this._sprite.material) === null || _b === void 0 ? void 0 : _b.passes[0].setUniform(idx, this._lightColor);
        }
        else if (key === '_lightProp') {
            this.propsVec4.x = this._lightWidth;
            this.propsVec4.y = this._soft;
            this.propsVec4.z = this._offset;
            this.propsVec4.w = this._rotation;
            (_c = this._sprite.material) === null || _c === void 0 ? void 0 : _c.passes[0].setUniform(idx, this.propsVec4);
        }
    }
    _play() {
        let tweenTarget = { offset: -3.0 }; // Wrap the number in an object
        cc_1.tween(tweenTarget).to(this.duration, { offset: 3.0 }, {
            onUpdate: () => {
                this.offset = tweenTarget.offset;
            },
            onComplete: () => {
                if (this.loop) {
                    this.scheduleOnce(() => {
                        this._play();
                    }, this.loop_delay);
                }
            }
        }).start();
    }
};
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: '流光颜色' })
], EffectFlowLight.prototype, "lightColor", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, tooltip: '流光颜色', visible: true })
], EffectFlowLight.prototype, "_lightColor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.1, 2.0, 0.001], tooltip: '流光寬度' })
], EffectFlowLight.prototype, "lightWidth", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, type: cc_5.CCFloat, slide: true, range: [0.1, 2.0, 0.001], tooltip: '流光寬度', visible: true })
], EffectFlowLight.prototype, "_lightWidth", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 10.0, 0.001], tooltip: '柔邊程度' })
], EffectFlowLight.prototype, "soft", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, type: cc_5.CCFloat, slide: true, range: [0.0, 10.0, 0.001], tooltip: '柔邊程度', visible: true })
], EffectFlowLight.prototype, "_soft", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [-3.0, 3.0, 0.001], tooltip: '偏移量' })
], EffectFlowLight.prototype, "offset", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, type: cc_5.CCFloat, slide: true, range: [-3.0, 3.0, 0.001], tooltip: '偏移量', visible: true })
], EffectFlowLight.prototype, "_offset", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 6.28, 0.1], tooltip: '流光角度' })
], EffectFlowLight.prototype, "rotation", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, type: cc_5.CCFloat, slide: true, range: [0.0, 6.28, 0.1], tooltip: '流光角度', visible: true })
], EffectFlowLight.prototype, "_rotation", void 0);
__decorate([
    property({ group: { name: "Anim", id: "2" }, tooltip: '是否自動撥放' })
], EffectFlowLight.prototype, "play", void 0);
__decorate([
    property({ group: { name: "Anim", id: "2" }, type: cc_5.CCFloat, slide: true, range: [0.01, 10, 0.01], tooltip: '持续时间' })
], EffectFlowLight.prototype, "duration", void 0);
__decorate([
    property({ group: { name: "Anim", id: "2" }, tooltip: '是否循环' })
], EffectFlowLight.prototype, "loop", void 0);
__decorate([
    property({ group: { name: "Anim", id: "2" }, type: cc_5.CCFloat, slide: true, range: [0, 10, 0.1], tooltip: '循环间隔' })
], EffectFlowLight.prototype, "loop_delay", void 0);
EffectFlowLight = __decorate([
    ccclass('EffectFlowLight'),
    requireComponent(cc_6.Sprite),
    executeInEditMode(true)
], EffectFlowLight);
exports.EffectFlowLight = EffectFlowLight;
//# sourceMappingURL=data:application/json;base64,