"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EffectDissolve = void 0;
const cc_1 = require("cc");
const EffectBase_1 = require("./EffectBase");
const cc_2 = require("cc");
const cc_3 = require("cc");
const cc_4 = require("cc");
const cc_5 = require("cc");
const cc_6 = require("cc");
const { ccclass, property } = cc_1._decorator;
let EffectDissolve = class EffectDissolve extends EffectBase_1.EffectBase {
    constructor() {
        super(...arguments);
        this.noiseTexture = null;
        this._dissolveColor = new cc_2.Color(0, 0, 0, 1);
        this._factor = 0.5;
        this._softness = 0.1;
        this._width = 0.1;
        //#endregion
        this.play = true;
        this.duration = 1.0;
        this.loop = true;
        this.loop_delay = 0.0;
    }
    //#region dissolveColor
    get dissolveColor() {
        return this._dissolveColor;
    }
    set dissolveColor(val) {
        this._dissolveColor.set(val);
        this._setParamsDirty('_dissolveColor');
    }
    //#endregion
    //#region effectFactor
    get factor() {
        return this._factor;
    }
    set factor(val) {
        this._factor = val;
        this._setParamsDirty('_factor');
    }
    //#endregion
    //#region softness
    get softness() {
        return this._softness;
    }
    set softness(val) {
        this._softness = val;
        this._setParamsDirty('_softness');
    }
    //#endregion
    //#region width
    get width() {
        return this._width;
    }
    set width(val) {
        this._width = val;
        this._setParamsDirty('_width');
    }
    _instMaterial() {
        if (this.effectAsset) {
            let mat = new cc_4.Material();
            mat.initialize({
                effectAsset: this.effectAsset,
                technique: this._is2Din3D ? 1 : 0
            });
            mat.setProperty('_noisetex', this.noiseTexture);
            this._setParams('_dissolveColor', mat.passes[0].getHandle('_dissolveColor'));
            this._setParams('_factor', mat.passes[0].getHandle('_factor'));
            this._setParams('_softness', mat.passes[0].getHandle('_softness'));
            this._setParams('_width', mat.passes[0].getHandle('_width'));
            this._sprite.customMaterial = mat;
            if (this.play) {
                setTimeout(() => {
                    this._play();
                }, 10);
            }
        }
    }
    _updateParams(key, idx) {
        var _a, _b, _c, _d;
        if (key === '_dissolveColor') {
            (_a = this._sprite.material) === null || _a === void 0 ? void 0 : _a.passes[0].setUniform(idx, this._dissolveColor);
        }
        else if (key === '_factor') {
            (_b = this._sprite.material) === null || _b === void 0 ? void 0 : _b.passes[0].setUniform(idx, this._factor);
        }
        else if (key === '_softness') {
            (_c = this._sprite.material) === null || _c === void 0 ? void 0 : _c.passes[0].setUniform(idx, this._softness);
        }
        else if (key === '_width') {
            (_d = this._sprite.material) === null || _d === void 0 ? void 0 : _d.passes[0].setUniform(idx, this._width);
        }
    }
    _play() {
        let tweenTarget = { factor: 0.0 };
        cc_6.tween(tweenTarget).to(this.duration, { factor: 1.0 }, {
            onUpdate: () => {
                this.factor = tweenTarget.factor;
            },
            onComplete: () => {
                if (this.loop) {
                    this.scheduleOnce(() => {
                        this._play();
                    }, this.loop_delay);
                }
            }
        }).start();
    }
};
__decorate([
    property({ type: cc_3.Texture2D, tooltip: "指定噪聲貼圖" })
], EffectDissolve.prototype, "noiseTexture", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: "溶解顏色" })
], EffectDissolve.prototype, "dissolveColor", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, tooltip: "溶解顏色", visible: true })
], EffectDissolve.prototype, "_dissolveColor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "溶解程度" })
], EffectDissolve.prototype, "factor", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "溶解程度", visible: true })
], EffectDissolve.prototype, "_factor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "柔邊程度" })
], EffectDissolve.prototype, "softness", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "柔邊程度", visible: true })
], EffectDissolve.prototype, "_softness", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "溶解寬度" })
], EffectDissolve.prototype, "width", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "溶解寬度", visible: true })
], EffectDissolve.prototype, "_width", void 0);
__decorate([
    property({ group: { name: "Anim", id: "2" }, tooltip: '是否自動撥放' })
], EffectDissolve.prototype, "play", void 0);
__decorate([
    property({ group: { name: "Anim", id: "2" }, type: cc_5.CCFloat, slide: true, range: [0.01, 10, 0.01], tooltip: '持续时间' })
], EffectDissolve.prototype, "duration", void 0);
__decorate([
    property({ group: { name: "Anim", id: "2" }, tooltip: '是否循环' })
], EffectDissolve.prototype, "loop", void 0);
__decorate([
    property({ group: { name: "Anim", id: "2" }, type: cc_5.CCFloat, slide: true, range: [0, 10, 0.1], tooltip: '循环间隔' })
], EffectDissolve.prototype, "loop_delay", void 0);
EffectDissolve = __decorate([
    ccclass('EffectDissolve')
], EffectDissolve);
exports.EffectDissolve = EffectDissolve;
//# sourceMappingURL=data:application/json;base64,