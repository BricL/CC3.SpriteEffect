"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EffectShadow = exports.ShadowType = void 0;
const cc_1 = require("cc");
const EffectBase_1 = require("./EffectBase");
const cc_2 = require("cc");
const cc_3 = require("cc");
const cc_4 = require("cc");
const cc_5 = require("cc");
const { ccclass, property } = cc_1._decorator;
var ShadowType;
(function (ShadowType) {
    ShadowType[ShadowType["LIMITED_BOUND"] = 0] = "LIMITED_BOUND";
    ShadowType[ShadowType["NORMAL"] = 1] = "NORMAL";
})(ShadowType = exports.ShadowType || (exports.ShadowType = {}));
let EffectShadow = class EffectShadow extends EffectBase_1.EffectBase {
    constructor() {
        super(...arguments);
        this._shadowType = ShadowType.LIMITED_BOUND;
        this._shadowColor = new cc_3.Color(0, 0, 0, 1.0);
        this._offset = new cc_4.Vec2(0.1, 0.1);
    }
    //#region ShadowType
    get shadowType() {
        return this._shadowType;
    }
    set shadowType(val) {
        this._shadowType = val;
        this._setParamsDirty('_shadowType');
    }
    //#endregion
    //#region ShadowColor
    get shadowColor() {
        return this._shadowColor;
    }
    set shadowColor(val) {
        this._shadowColor.set(val);
        this._setParamsDirty('_shadowColor');
    }
    //#endregion
    //#region Offset
    get offset() {
        return this._offset;
    }
    set offset(val) {
        this._offset.set(val);
        this._setParamsDirty('_offset');
    }
    //#endregion
    _instMaterial() {
        if (!this._sprite.customMaterial) {
            if (this.effectAsset) {
                let mat = new cc_5.Material();
                mat.initialize({
                    effectAsset: this.effectAsset,
                    defines: { USE_TEXTURE: true }
                });
                this._setParams('_shadowType', -1);
                this._setParams('_shadowColor', mat.passes[0].getHandle('_shadowColor'));
                this._setParams('_offset', mat.passes[0].getHandle('_offset'));
                this._sprite.customMaterial = mat;
            }
            else {
                cc_2.error('EffectShadow._instMaterial: effectAsset is null');
            }
        }
    }
    _updateParams(key, idx) {
        var _a, _b;
        if (key === '_shadowColor') {
            (_a = this._sprite.material) === null || _a === void 0 ? void 0 : _a.passes[0].setUniform(idx, this._shadowColor);
        }
        else if (key === '_offset') {
            (_b = this._sprite.material) === null || _b === void 0 ? void 0 : _b.passes[0].setUniform(idx, this._offset);
        }
        else if (key === '_shadowType') {
            let mat = new cc_5.Material();
            switch (this._shadowType) {
                case ShadowType.LIMITED_BOUND:
                    mat.initialize({
                        effectAsset: this.effectAsset,
                        defines: { USE_TEXTURE: true },
                        technique: 0
                    });
                    break;
                case ShadowType.NORMAL:
                    mat.initialize({
                        effectAsset: this.effectAsset,
                        defines: { USE_TEXTURE: true },
                        technique: 1
                    });
                    break;
            }
            this._setParams('_shadowType', -1);
            this._setParams('_shadowColor', mat.passes[0].getHandle('_shadowColor'));
            this._setParams('_offset', mat.passes[0].getHandle('_offset'));
            this._sprite.customMaterial = mat;
        }
    }
};
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_1.Enum(ShadowType), tooltip: "陰影模式" })
], EffectShadow.prototype, "shadowType", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, tooltip: "陰影模式", visible: true })
], EffectShadow.prototype, "_shadowType", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: "陰影顏色" })
], EffectShadow.prototype, "shadowColor", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, tooltip: "陰影顏色", visible: true })
], EffectShadow.prototype, "_shadowColor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, tooltip: "偏移量" })
], EffectShadow.prototype, "offset", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "偏移量", visible: true })
], EffectShadow.prototype, "_offset", void 0);
EffectShadow = __decorate([
    ccclass('EffectShadow')
], EffectShadow);
exports.EffectShadow = EffectShadow;
//# sourceMappingURL=data:application/json;base64,