"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpriteEffectColor = exports.BlurMode = exports.ColorMode = exports.ToneMode = void 0;
const cc_1 = require("cc");
const env_1 = require("cc/env");
const SpriteEffectBase_1 = require("./SpriteEffectBase");
const { ccclass, property } = cc_1._decorator;
var ToneMode;
(function (ToneMode) {
    ToneMode[ToneMode["GRAY"] = 0] = "GRAY";
    ToneMode[ToneMode["NEGA"] = 1] = "NEGA";
    ToneMode[ToneMode["SEPIA"] = 2] = "SEPIA";
    ToneMode[ToneMode["NORMAL"] = 3] = "NORMAL";
})(ToneMode = exports.ToneMode || (exports.ToneMode = {}));
var ColorMode;
(function (ColorMode) {
    ColorMode[ColorMode["ADD"] = 0] = "ADD";
    ColorMode[ColorMode["SUB"] = 1] = "SUB";
    ColorMode[ColorMode["FILL"] = 2] = "FILL";
    ColorMode[ColorMode["MULT"] = 3] = "MULT";
})(ColorMode = exports.ColorMode || (exports.ColorMode = {}));
var BlurMode;
(function (BlurMode) {
    BlurMode[BlurMode["NONE"] = 0] = "NONE";
    BlurMode[BlurMode["GAUSSIAN"] = 1] = "GAUSSIAN";
})(BlurMode = exports.BlurMode || (exports.BlurMode = {}));
let SpriteEffectColor = class SpriteEffectColor extends SpriteEffectBase_1.SpriteEffectBase {
    constructor() {
        super(...arguments);
        this._toneMode = ToneMode.NORMAL;
        this._toneFactor = 1.0;
        this._colorMode = ColorMode.MULT;
        this._colorFactor = 1.0;
        this._blurMode = BlurMode.NONE;
        this._blurFactor = 1.0;
    }
    //#region toneMode
    set toneMode(val) {
        this._toneMode = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.init(this.countOfProps);
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get toneMode() {
        return this._toneMode;
    }
    //#endregion
    //#region toneFactor
    set toneFactor(val) {
        this._toneFactor = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get toneFactor() {
        return this._toneFactor;
    }
    //#endregion
    //#region colorMode
    set colorMode(val) {
        this._colorMode = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.init(this.countOfProps);
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get colorMode() {
        return this._colorMode;
    }
    //#endregion
    //#region colorFactor
    set colorFactor(val) {
        this._colorFactor = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get colorFactor() {
        return this._colorFactor;
    }
    //#endregion
    //#region blurMode
    set blurMode(val) {
        this._blurMode = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.init(this.countOfProps);
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get blurMode() {
        return this._blurMode;
    }
    //#endregion
    //#region blurFactor
    set blurFactor(val) {
        this._blurFactor = val;
        if (env_1.EDITOR_NOT_IN_PREVIEW) {
            this.reflashParams();
        }
        else {
            this._isPropDirty = true;
        }
    }
    get blurFactor() {
        return this._blurFactor;
    }
    //#endregion
    //#region override
    get countOfUsedFloats() {
        return 13;
    }
    getPropsUnionKey() {
        const unionKey = `${this.constructor.name}_${this._is2Din3D}_${this._toneMode}_${this._colorMode}_${this._blurMode}`;
        return unionKey;
    }
    /**
     * @override SpriteEffectBase
     */
    updateParams(index, propBuffer) {
        const baseUV = this.getUV(this.spriteFrame.uv);
        let blurTextureSize = new cc_1.Vec2(100, 100);
        if (this.spriteFrame) {
            blurTextureSize.x = Math.floor(this.spriteFrame.width * baseUV.z);
            blurTextureSize.y = Math.floor(this.spriteFrame.height * baseUV.w);
        }
        else {
            blurTextureSize.x = this.node.getComponent(cc_1.UITransform).contentSize.width;
            blurTextureSize.y = this.node.getComponent(cc_1.UITransform).contentSize.height;
        }
        propBuffer[index + 0] = this._effectColor.r / 255;
        propBuffer[index + 1] = this._effectColor.g / 255;
        propBuffer[index + 2] = this._effectColor.b / 255;
        propBuffer[index + 3] = this._effectColor.a / 255;
        propBuffer[index + 4] = baseUV.x;
        propBuffer[index + 5] = baseUV.y;
        propBuffer[index + 6] = baseUV.z;
        propBuffer[index + 7] = baseUV.w;
        propBuffer[index + 8] = blurTextureSize.x;
        propBuffer[index + 9] = blurTextureSize.y;
        // propBuffer[index + 10] = 0.0;
        // propBuffer[index + 11] = 1.0;
        propBuffer[index + 12] = this.toneFactor;
        propBuffer[index + 13] = this.colorFactor;
        propBuffer[index + 14] = this.blurFactor;
        // propBuffer[index + 15] = 1.0;
    }
    /**
     * @override SpriteEffectBase
     */
    initMaterial() {
        let mat = new cc_1.Material();
        let define_macro = {
            USE_BLUR: false,
            IS_GRAY: false,
            IS_NEGA: false,
            IS_SEPIA: false,
            IS_ADD: false,
            IS_SUB: false,
            IS_FILL: false,
            IS_MULT: true
        };
        switch (this._toneMode) {
            case ToneMode.GRAY:
                define_macro.IS_GRAY = true;
                break;
            case ToneMode.NEGA:
                define_macro.IS_NEGA = true;
                break;
            case ToneMode.SEPIA:
                define_macro.IS_SEPIA = true;
                break;
        }
        ;
        switch (this._colorMode) {
            case ColorMode.ADD:
                define_macro.IS_ADD = true;
                break;
            case ColorMode.SUB:
                define_macro.IS_SUB = true;
                break;
            case ColorMode.FILL:
                define_macro.IS_FILL = true;
                break;
            case ColorMode.MULT:
                define_macro.IS_MULT = true;
                break;
        }
        switch (this._blurMode) {
            case BlurMode.NONE:
                define_macro.USE_BLUR = false;
                break;
            case BlurMode.GAUSSIAN:
                define_macro.USE_BLUR = true;
                break;
        }
        mat.initialize({
            effectAsset: this.effectAsset,
            defines: define_macro,
            technique: this._is2Din3D ? 1 : 0
        });
        return mat;
    }
};
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_1.Enum(ToneMode), tooltip: "色調模式" })
], SpriteEffectColor.prototype, "toneMode", null);
__decorate([
    property({ type: cc_1.Enum(ToneMode) })
], SpriteEffectColor.prototype, "_toneMode", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "色調程度" })
], SpriteEffectColor.prototype, "toneFactor", null);
__decorate([
    property
], SpriteEffectColor.prototype, "_toneFactor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_1.Enum(ColorMode), tooltip: "顏色模式" })
], SpriteEffectColor.prototype, "colorMode", null);
__decorate([
    property({ type: cc_1.Enum(ColorMode) })
], SpriteEffectColor.prototype, "_colorMode", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: "顏色程度" })
], SpriteEffectColor.prototype, "colorFactor", null);
__decorate([
    property
], SpriteEffectColor.prototype, "_colorFactor", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, type: cc_1.Enum(BlurMode), tooltip: "模糊模式" })
], SpriteEffectColor.prototype, "blurMode", null);
__decorate([
    property({ type: cc_1.Enum(BlurMode) })
], SpriteEffectColor.prototype, "_blurMode", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: "模糊程度" })
], SpriteEffectColor.prototype, "blurFactor", null);
__decorate([
    property
], SpriteEffectColor.prototype, "_blurFactor", void 0);
SpriteEffectColor = __decorate([
    ccclass('SpriteEffectColor')
], SpriteEffectColor);
exports.SpriteEffectColor = SpriteEffectColor;
//# sourceMappingURL=data:application/json;base64,