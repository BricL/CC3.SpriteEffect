"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EffectWaterWave = void 0;
const cc_1 = require("cc");
const EffectBase_1 = require("./EffectBase");
const cc_2 = require("cc");
const cc_3 = require("cc");
const { ccclass, property } = cc_1._decorator;
let EffectWaterWave = class EffectWaterWave extends EffectBase_1.EffectBase {
    constructor() {
        super(...arguments);
        this._offset = 0.5;
        this._waveWidth = 20.0;
        this._waveHeight = 0.01;
        this._waveSpeed = 10.0;
    }
    //#region offset
    get offset() {
        return this._offset;
    }
    set offset(val) {
        this._offset = val;
        this._setParamsDirty('_offset');
    }
    //#endregion
    //#region waveWidth
    get waveWidth() {
        return this._waveWidth;
    }
    set waveWidth(val) {
        this._waveWidth = val;
        this._setParamsDirty('_waveWidth');
    }
    //#endregion
    //#region waveHeight
    get waveHeight() {
        return this._waveHeight;
    }
    set waveHeight(val) {
        this._waveHeight = val;
        this._setParamsDirty('_waveHeight');
    }
    //#endregion
    //#region waveSpeed
    get waveSpeed() {
        return this._waveSpeed;
    }
    set waveSpeed(val) {
        this._waveSpeed = val;
        this._setParamsDirty('_waveSpeed');
    }
    //#endregion
    _instMaterial() {
        if (this.effectAsset) {
            let mat = new cc_3.Material();
            mat.initialize({
                effectAsset: this.effectAsset,
                defines: { USE_TEXTURE: true },
                technique: this._is2Din3D ? 1 : 0
            });
            this._setParams('_offset', mat.passes[0].getHandle('_offset'));
            this._setParams('_waveWidth', mat.passes[0].getHandle('_waveWidth'));
            this._setParams('_waveHeight', mat.passes[0].getHandle('_waveHeight'));
            this._setParams('_waveSpeed', mat.passes[0].getHandle('_waveSpeed'));
            this._sprite.customMaterial = mat;
        }
        else {
            cc_2.error('EffectWaterWave._instMaterial: effectAsset is null');
        }
    }
    _updateParams(key, idx) {
        var _a, _b, _c, _d;
        if (key === '_offset') {
            (_a = this._sprite.customMaterial) === null || _a === void 0 ? void 0 : _a.passes[0].setUniform(idx, 1.0 - this._offset);
        }
        else if (key === '_waveWidth') {
            (_b = this._sprite.customMaterial) === null || _b === void 0 ? void 0 : _b.passes[0].setUniform(idx, this._waveWidth);
        }
        else if (key === '_waveHeight') {
            (_c = this._sprite.customMaterial) === null || _c === void 0 ? void 0 : _c.passes[0].setUniform(idx, this._waveHeight);
        }
        else if (key === '_waveSpeed') {
            (_d = this._sprite.customMaterial) === null || _d === void 0 ? void 0 : _d.passes[0].setUniform(idx, this._waveSpeed);
        }
    }
};
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: '偏移量' })
], EffectWaterWave.prototype, "offset", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: '偏移量', visible: true })
], EffectWaterWave.prototype, "_offset", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 20, 0.01], tooltip: '水波寬' })
], EffectWaterWave.prototype, "waveWidth", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 20, 0.01], tooltip: '水波寬', visible: true })
], EffectWaterWave.prototype, "_waveWidth", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: '水波高' })
], EffectWaterWave.prototype, "waveHeight", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 1, 0.01], tooltip: '水波高', visible: true })
], EffectWaterWave.prototype, "_waveHeight", void 0);
__decorate([
    property({ group: { name: "Setter/Getter", id: "1" }, slide: true, range: [0, 20, 0.01], tooltip: '速度' })
], EffectWaterWave.prototype, "waveSpeed", null);
__decorate([
    property({ group: { name: "Private Props", id: "1" }, slide: true, range: [0, 20, 0.01], tooltip: '速度', visible: true })
], EffectWaterWave.prototype, "_waveSpeed", void 0);
EffectWaterWave = __decorate([
    ccclass('EffectWaterWave')
], EffectWaterWave);
exports.EffectWaterWave = EffectWaterWave;
//# sourceMappingURL=data:application/json;base64,